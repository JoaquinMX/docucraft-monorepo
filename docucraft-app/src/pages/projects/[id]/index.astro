---
import ProjectSidebar from "@/components/ProjectSidebar.astro";
import MainLayout from "@layouts/MainLayout.astro";
import ErrorMessage from "@/components/ErrorMessage.astro";
import { app } from "@/firebase/server";
import { getAuth } from "firebase-admin/auth";
import { transformAIResponseToAIAnalysis } from "@/utils/validation";
import type { Project } from "@/types/Project";
import {
  DIAGRAM_CONFIG,
  type DiagramId,
} from "@/utils/aiAnalysis";
import { getProjectForUser } from "@/server/projectService";

const auth = getAuth(app);
const id = Astro.params.id as string;

// Get current user
if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/signin");
}
const sessionCookie = Astro.cookies.get("__session")?.value;
const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");
const user = await auth.getUser(decodedCookie.uid);

if (!user) {
  return Astro.redirect("/signin");
}

// Fetch project from Firestore using the user-based structure
let project: Project | null = null;
let error: string | null = null;

try {
  const { project: fetchedProject } = await getProjectForUser(user.uid, id);

  if (fetchedProject) {
    project = fetchedProject;
  }
} catch (err) {
  console.error("Error fetching project:", err);
  error = "Failed to load project";
}

if (!project && !error) {
  return Astro.redirect("/404");
}

// Function to transform AI analysis from various formats to flat object format
function transformAIAnalysis(aiAnalysis: any): any {
  // If aiAnalysis is already in the flat format (has erd, architecture, etc.), return as-is
  if (aiAnalysis && typeof aiAnalysis === 'object' && (aiAnalysis.erd || aiAnalysis.architecture || aiAnalysis.c4 || aiAnalysis.userStories || aiAnalysis.gantt || aiAnalysis.kanban)) {
    return aiAnalysis;
  }

  // Otherwise, transform from the old nested format
  return transformAIResponseToAIAnalysis(aiAnalysis);
}

const transformedProjectAnalysis = project?.aiAnalysis
  ? transformAIAnalysis(project.aiAnalysis)
  : null;

const diagramDescriptions: Record<DiagramId, string> = {
  erd: "View the database schema",
  architecture: "View the system design",
  c4: "View the context diagram",
  "user-stories": "View user stories and requirements",
  gantt: "View the project timeline",
  kanban: "View the development workflow",
};

const statusClasses: Record<string, string> = {
  pending: "bg-yellow-500/10 text-yellow-300 border border-yellow-500/40",
  completed:
    "bg-emerald-500/10 text-emerald-300 border border-emerald-500/40",
  failed: "bg-red-500/10 text-red-300 border border-red-500/40",
};

const diagramCards = (Object.keys(DIAGRAM_CONFIG) as DiagramId[])
  .filter((diagramId) => {
    const config = DIAGRAM_CONFIG[diagramId];
    return (
      project?.selectedDiagrams?.includes(diagramId) ||
      Boolean(transformedProjectAnalysis?.[config.field]) ||
      Boolean(transformedProjectAnalysis?.[config.statusField])
    );
  })
  .map((diagramId) => {
    const config = DIAGRAM_CONFIG[diagramId];
    const status =
      transformedProjectAnalysis?.[config.statusField] ||
      (transformedProjectAnalysis?.[config.field] ? "completed" : null);
    const hasContent = Boolean(transformedProjectAnalysis?.[config.field]);

    return {
      id: diagramId,
      label: config.label,
      description: diagramDescriptions[diagramId],
      status: status as "pending" | "completed" | "failed" | null,
      hasContent,
      href: hasContent
        ? `/projects/${project?.id}/diagram/${diagramId}`
        : undefined,
    };
  });
---

<MainLayout user={user}>
  <div class="layout-container flex h-full grow flex-col">
    <div class="gap-1 px-6 flex flex-1 justify-center py-5">
      <ProjectSidebar projectId={id} />
      <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
        <div class="flex flex-wrap justify-between gap-3 p-4">
          <p
            class="text-white tracking-light text-[32px] font-bold leading-tight min-w-72"
          >
            {project?.name}
          </p>
        </div>

        {error && <ErrorMessage message={error} showRetry={true} />}

        {
          !error && (
            <>
              <div class="px-4 pb-6">
                <div class="flex flex-col gap-4">
                  <h2 class="text-white text-xl font-semibold">Description</h2>
                  <p class="text-[#94a3b3] text-lg leading-normal">
                    {project?.description}
                  </p>
                </div>
              </div>
              <div class="px-4 pb-6">
                <div class="flex flex-col gap-4">
                  <h2 class="text-white text-xl font-semibold">
                    Key Objectives
                  </h2>
                  <p class="text-[#d1d5db] leading-normal">
                    {project?.keyObjectives}
                  </p>
                </div>
              </div>
              {diagramCards.length > 0 && (
                <div class="px-4 pb-6">
                  <div class="flex flex-col gap-4">
                    <h2 class="text-white text-xl font-semibold">
                      AI Analysis
                    </h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {diagramCards.map((card) => (
                        <div
                          class="bg-[#1f2937] rounded-lg p-4 border border-transparent hover:border-[#3ba7d1]/40 transition-colors"
                          data-diagram-id={card.id}
                        >
                          <div class="flex items-start justify-between gap-2">
                            <div>
                              <h3 class="text-white font-medium mb-1">
                                {card.label}
                              </h3>
                              <p class="text-[#9ca3af] text-sm">
                                {card.description}
                              </p>
                            </div>
                            {card.status && (
                              <span
                                class={`text-xs font-medium px-2 py-1 rounded-full border ${
                                  statusClasses[card.status] ||
                                  statusClasses.pending
                                }`}
                              >
                                {card.status.charAt(0).toUpperCase() +
                                  card.status.slice(1)}
                              </span>
                            )}
                          </div>
                          <div class="flex flex-wrap items-center gap-2 mt-4">
                            <a
                              class={`inline-flex items-center justify-center rounded-md border px-3 py-2 text-sm font-medium transition-colors ${
                                card.hasContent
                                  ? "border-[#3ba7d1]/60 text-white hover:border-[#3ba7d1] hover:bg-[#152130]"
                                  : "border-[#4b5563] text-[#6b7280] cursor-not-allowed"
                              }`}
                              href={card.href}
                              aria-disabled={!card.hasContent}
                              tabIndex={card.hasContent ? 0 : -1}
                            >
                              View
                            </a>
                            <button
                              type="button"
                              class="regenerate-button inline-flex items-center justify-center rounded-md bg-[#3ba7d1] px-3 py-2 text-sm font-medium text-white transition-colors hover:bg-[#2e85a8] disabled:opacity-50 disabled:cursor-not-allowed"
                              data-project-id={project?.id}
                              data-diagram-id={card.id}
                            >
                              Regenerate
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </>
          )
        }
      </div>
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const buttons = Array.from(
      document.querySelectorAll<HTMLButtonElement>(".regenerate-button")
    );

    buttons.forEach((button) => {
      button.addEventListener("click", async () => {
        const projectId = button.dataset.projectId;
        const diagramId = button.dataset.diagramId;

        if (!projectId || !diagramId) {
          console.warn("Missing project or diagram identifier for regeneration");
          return;
        }

        const originalText = button.textContent;
        button.disabled = true;
        button.textContent = "Regenerating...";

        try {
          const response = await fetch(
            `/api/projects/${projectId}/ai-analysis/regenerate/${diagramId}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          if (!response.ok) {
            const data = await response.json().catch(() => ({}));
            throw new Error(
              (data as { error?: string }).error ||
                "Failed to regenerate diagram"
            );
          }

          window.location.reload();
        } catch (error) {
          console.error("Failed to regenerate diagram:", error);
          alert(
            error instanceof Error
              ? error.message
              : "Failed to regenerate diagram"
          );
          button.disabled = false;
          button.textContent = originalText ?? "Regenerate";
        }
      });
    });
  });
</script>
