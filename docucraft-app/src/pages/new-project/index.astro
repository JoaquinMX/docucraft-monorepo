---
import MainLayout from "@layouts/MainLayout.astro";
import ImageSelector from "@/components/ImageSelector.astro";
import DiagramSelector from "@/components/DiagramSelector.astro";
import { projectTemplates } from "@/data/projectTemplates";

const templatesJson = JSON.stringify(projectTemplates);
import { app } from "../../firebase/server";
import { getAuth } from "firebase-admin/auth";

const auth = getAuth(app);

// Get current user (allow anonymous users)
let user: {
  displayName?: string | null;
  email?: string | null;
  isAnonymous?: boolean;
  uid?: string;
} | null = null;
if (Astro.cookies.has("__session")) {
  try {
    const sessionCookie = Astro.cookies.get("__session")?.value;
    const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");
    const userRecord = await auth.getUser(decodedCookie.uid);
    user = {
      displayName: userRecord.displayName,
      email: userRecord.email,
      isAnonymous: userRecord.providerData.length === 0,
      uid: userRecord.uid,
    };
  } catch (error) {
    // For anonymous users, we'll create a temporary user object
    user = {
      displayName: null,
      email: null,
      isAnonymous: true,
      uid: `anonymous_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    };
  }
} else {
  return Astro.redirect("/signin");
}
---

<MainLayout user={user}>
  <div class="flex flex-1 justify-center py-5">
    <div
      class="layout-content-container flex flex-col w-[512px] max-w-[512px] py-5"
    >
      <h2
        class="text-white tracking-light text-[28px] font-bold leading-tight px-4 text-center pb-3 pt-5"
      >
        Start a new project
      </h2>

      {
        user?.isAnonymous && (
          <div class="mx-4 mb-4 p-3 bg-[#374151] rounded-lg border border-[#4b5563]">
            <p class="text-[#d1d5db] text-sm">
              <strong>Guest Mode:</strong> You're creating a project as a guest.
              Your project will be saved temporarily.
              <a href="/signin" class="text-[#3ba7d1] hover:underline">
                Sign in
              </a>{" "}
              to save your projects permanently.
            </p>
          </div>
        )
      }

      <form id="projectForm" class="flex flex-col gap-5 px-4" novalidate>
        <div class="flex flex-col items-center gap-1 text-center">
          <p id="stepCounter" class="text-[#94a3b3] text-xs uppercase tracking-[0.2em]">
            Step 1 of 3 Â· Choose a template
          </p>
          <p class="text-white text-lg font-semibold">Project creation wizard</p>
        </div>

        <div id="stepError" class="hidden rounded-lg border border-red-500/40 bg-red-900/20 px-4 py-3">
          <p class="text-red-300 text-sm"></p>
        </div>

        <div
          data-step
          data-step-label="Choose a template"
          class="flex flex-col gap-4"
        >
          <p class="text-[#94a3b3] text-sm text-center">
            Select the project template that best matches your vertical. We will
            tailor the follow-up questions and AI prompts based on your choice.
          </p>

          <div class="flex flex-col gap-3">
            {projectTemplates.map((template) => (
              <label class="flex cursor-pointer flex-col gap-3">
                <input
                  type="radio"
                  name="templateId"
                  value={template.id}
                  class="peer sr-only"
                  data-template-radio
                  required
                />
                <div
                  class="flex flex-col gap-2 rounded-lg border border-[#223649] bg-[#0c1520] p-4 transition hover:border-[#2e4257] hover:bg-[#101c2a] peer-checked:border-[#3ba7d1] peer-checked:bg-[#132033]"
                >
                  <div class="flex items-start justify-between gap-3">
                    <div class="flex flex-col gap-1">
                      <span class="text-[#3ba7d1] text-xs font-semibold uppercase tracking-wide">
                        {template.vertical}
                      </span>
                      <span class="text-white text-base font-semibold leading-tight">
                        {template.name}
                      </span>
                    </div>
                  </div>
                  <p class="text-[#c7d2df] text-sm leading-relaxed">
                    {template.summary}
                  </p>
                  <div class="flex flex-col gap-2">
                    <span class="text-[#94a3b3] text-xs font-semibold uppercase tracking-wide">
                      Recommended stack
                    </span>
                    <div class="flex flex-wrap gap-2">
                      {template.recommendedStack.map((item) => (
                        <span
                          class="rounded-full border border-[#223649] bg-[#121f2d] px-3 py-1 text-xs font-medium text-[#e5ecf5]"
                        >
                          {item}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </label>
            ))}
          </div>
        </div>

        <div
          data-step
          data-step-label="Add contextual details"
          class="hidden flex-col gap-4"
        >
          <p class="text-[#94a3b3] text-sm text-center">
            Provide additional context so we can ground the AI generated assets
            in your operating model, compliance posture, and launch priorities.
          </p>

          <div
            id="questionsPlaceholder"
            class="rounded-lg border border-dashed border-[#223649] bg-[#0c1520] px-4 py-6 text-center text-[#94a3b3]"
          >
            Select a template to view the contextual questions.
          </div>

          {projectTemplates.map((template) => (
            <div
              data-template-questions={template.id}
              class="hidden flex flex-col gap-5 rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-5"
            >
              <div class="flex flex-col gap-1">
                <span class="text-[#3ba7d1] text-xs font-semibold uppercase tracking-wide">
                  {template.vertical}
                </span>
                <span class="text-white text-base font-semibold leading-tight">
                  {template.name}
                </span>
                <p class="text-[#c7d2df] text-sm leading-relaxed">
                  {template.summary}
                </p>
                <div class="flex flex-wrap gap-2 pt-2">
                  {template.recommendedStack.map((item) => (
                    <span
                      class="rounded-full border border-[#223649] bg-[#121f2d] px-3 py-1 text-xs font-medium text-[#e5ecf5]"
                    >
                      {item}
                    </span>
                  ))}
                </div>
              </div>

              <div class="flex flex-col gap-4">
                {template.followUpQuestions.map((question) => {
                  const inputId = `${template.id}-${question.id}`;
                  return (
                    <div
                      data-question-id={question.id}
                      data-question-type={question.type}
                      data-question-prompt={question.prompt}
                      class="flex flex-col gap-2"
                    >
                      <label
                        for={inputId}
                        class="text-white text-sm font-medium leading-normal"
                      >
                        {question.prompt}
                      </label>
                      {question.helperText && (
                        <p class="text-[#94a3b3] text-xs leading-relaxed">
                          {question.helperText}
                        </p>
                      )}
                      {question.type === "text" && (
                        <input
                          id={inputId}
                          name={inputId}
                          type="text"
                          data-question-input={question.id}
                          class="flex h-11 w-full rounded-lg border border-[#223649] bg-[#101c2a] px-4 text-sm text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none"
                          placeholder="Enter a short response"
                        />
                      )}
                      {question.type === "textarea" && (
                        <textarea
                          id={inputId}
                          name={inputId}
                          rows="3"
                          data-question-input={question.id}
                          class="flex w-full rounded-lg border border-[#223649] bg-[#101c2a] px-4 py-3 text-sm text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none"
                          placeholder="Share the key considerations"
                        ></textarea>
                      )}
                      {question.type === "select" && (
                        <select
                          id={inputId}
                          name={inputId}
                          data-question-input={question.id}
                          class="flex h-11 w-full rounded-lg border border-[#223649] bg-[#101c2a] px-4 text-sm text-white focus:border-[#3ba7d1] focus:outline-none"
                        >
                          <option value="">Select an option</option>
                          {question.options?.map((option) => (
                            <option value={option.label}>{option.label}</option>
                          ))}
                        </select>
                      )}
                      {question.type === "multi-select" && (
                        <div class="flex flex-col gap-2">
                          {question.options?.map((option) => {
                            const optionId = `${inputId}-${option.id}`;
                            return (
                              <label
                                for={optionId}
                                class="flex items-center gap-2 rounded-lg border border-[#223649] bg-[#101c2a] px-3 py-2 text-sm text-[#e5ecf5] hover:border-[#2e4257]"
                              >
                                <input
                                  id={optionId}
                                  type="checkbox"
                                  value={option.label}
                                  data-question-input={question.id}
                                  class="h-4 w-4 rounded border-[#223649] bg-[#0c1520] text-[#3ba7d1] focus:ring-[#3ba7d1]"
                                />
                                <span>{option.label}</span>
                              </label>
                            );
                          })}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          ))}
        </div>

        <div
          data-step
          data-step-label="Finalize project details"
          class="hidden flex-col gap-4"
        >
          <div class="flex flex-col gap-2">
            <label
              for="projectName"
              class="text-white text-sm font-medium leading-normal"
            >
              Project Name
            </label>
            <input
              type="text"
              name="projectName"
              id="projectName"
              class="flex h-12 w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="Enter your project name"
              required
            />
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="projectDescription"
              class="text-white text-sm font-medium leading-normal"
            >
              Project Description
            </label>
            <textarea
              name="projectDescription"
              id="projectDescription"
              rows="4"
              class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="Describe your project in detail..."
              required></textarea>
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="keyObjectives"
              class="text-white text-sm font-medium leading-normal"
            >
              Key Objectives
            </label>
            <textarea
              name="keyObjectives"
              id="keyObjectives"
              rows="3"
              class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="What are the main goals of this project?"
              required></textarea>
          </div>

          <ImageSelector name="projectImage" selectedImage="alpha" />

          <DiagramSelector />
        </div>

        <div class="flex items-center justify-between pt-2">
          <button
            type="button"
            id="backButton"
            class="hidden h-11 rounded-lg border border-[#223649] px-4 text-sm font-medium text-[#e5ecf5] transition hover:border-[#2e4257] hover:bg-[#101c2a]"
          >
            Back
          </button>
          <div class="flex items-center gap-3">
            <button
              type="button"
              id="nextButton"
              class="h-11 rounded-lg bg-[#223649] px-6 text-sm font-medium text-[#e5ecf5] transition hover:bg-[#2e4257]"
            >
              Next
            </button>
            <button
              type="submit"
              id="submitButton"
              class="hidden flex h-11 min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg bg-[#3ba7d1] px-6 text-sm font-medium leading-normal text-white transition-colors hover:bg-[#2e85a8]"
            >
              <span id="buttonText">Create Project</span>
              <div
                id="loadingSpinner"
                class="hidden ml-2 h-4 w-4 animate-spin rounded-full border-b-2 border-white"
              ></div>
            </button>
          </div>
        </div>

        <div id="progressContainer" class="hidden space-y-2">
          <p class="text-white text-sm font-medium">Generating diagrams...</p>
          <div id="progressItems" class="space-y-1"></div>
        </div>
      </form>

      <div
        id="errorMessage"
        class="hidden mx-4 mt-4 p-3 bg-red-900/20 border border-red-500/50 rounded-lg"
      >
        <p class="text-red-400 text-sm"></p>
      </div>
    </div>
  </div>
</MainLayout>

<script type="application/json" id="projectTemplatesData">
  {templatesJson}
</script>

<script>
  import { transformWorkerResponseToAIAnalysis } from "@/utils/validation";

  type TemplateAnswer = {
    questionId: string;
    question: string;
    type: string;
    response: string | string[];
  };

  type TemplateMetadata = {
    id: string;
    name: string;
    verticalId?: string;
    vertical: string;
    summary: string;
    recommendedStack: string[];
    followUpQuestions?: Array<{ id: string; prompt: string; type: string }>;
  };

  // Use astro:page-load to ensure this runs on every page navigation
  document.addEventListener("astro:page-load", () => {
    const workerUrl = import.meta.env.PUBLIC_WORKER_URL;
    const form = document.getElementById("projectForm") as HTMLFormElement | null;
    const submitButton = document.getElementById(
      "submitButton",
    ) as HTMLButtonElement | null;
    const buttonText = document.getElementById(
      "buttonText",
    ) as HTMLSpanElement | null;
    const loadingSpinner = document.getElementById(
      "loadingSpinner",
    ) as HTMLDivElement | null;
    const errorMessage = document.getElementById(
      "errorMessage",
    ) as HTMLDivElement | null;
    const progressContainer = document.getElementById(
      "progressContainer",
    ) as HTMLDivElement | null;
    const progressItems = document.getElementById(
      "progressItems",
    ) as HTMLDivElement | null;
    const nextButton = document.getElementById("nextButton") as
      | HTMLButtonElement
      | null;
    const backButton = document.getElementById("backButton") as
      | HTMLButtonElement
      | null;
    const stepCounter = document.getElementById("stepCounter") as
      | HTMLParagraphElement
      | null;
    const stepError = document.getElementById("stepError") as HTMLDivElement | null;
    const stepErrorText = stepError?.querySelector("p") as HTMLParagraphElement | null;
    const templateRadios = document.querySelectorAll<HTMLInputElement>(
      "input[data-template-radio]",
    );
    const templateSections = document.querySelectorAll<HTMLElement>(
      "[data-template-questions]",
    );
    const questionsPlaceholder = document.getElementById(
      "questionsPlaceholder",
    ) as HTMLDivElement | null;
    const templatesElement = document.getElementById(
      "projectTemplatesData",
    );

    if (
      !form ||
      !submitButton ||
      !buttonText ||
      !loadingSpinner ||
      !errorMessage ||
      !progressContainer ||
      !progressItems
    ) {
      console.error("Required form elements not found");
      return;
    }

    const errorMessageText = errorMessage.querySelector("p") as
      | HTMLParagraphElement
      | null;
    if (!errorMessageText) {
      console.error("Error message container is missing a paragraph element");
      return;
    }

    let templates: TemplateMetadata[] = [];
    try {
      templates = templatesElement
        ? JSON.parse(templatesElement.textContent ?? "[]")
        : [];
    } catch (error) {
      console.error("Failed to parse template metadata", error);
    }

    const steps = Array.from(
      document.querySelectorAll<HTMLElement>("[data-step]"),
    );
    const totalSteps = steps.length;
    let currentStepIndex = 0;

    const stepLabels = steps.map(
      (step, index) => step.dataset.stepLabel ?? `Step ${index + 1}`,
    );

    function clearStepError() {
      if (stepError) {
        stepError.classList.add("hidden");
      }
      if (stepErrorText) {
        stepErrorText.textContent = "";
      }
    }

    function showStepError(message: string) {
      if (!stepError) {
        return;
      }
      if (stepErrorText) {
        stepErrorText.textContent = message;
      }
      stepError.classList.remove("hidden");
    }

    function getSelectedTemplateId(): string | null {
      const selected = Array.from(templateRadios).find((radio) => radio.checked);
      return selected?.value ?? null;
    }

    function toggleNavigationDisabled(disabled: boolean) {
      if (nextButton) {
        nextButton.disabled = disabled;
        nextButton.classList.toggle("opacity-60", disabled);
        nextButton.classList.toggle("cursor-not-allowed", disabled);
      }
      if (backButton && !backButton.classList.contains("hidden")) {
        backButton.disabled = disabled;
        backButton.classList.toggle("opacity-60", disabled);
        backButton.classList.toggle("cursor-not-allowed", disabled);
      }
    }

    function showStep(index: number) {
      steps.forEach((step, stepIndex) => {
        step.classList.toggle("hidden", stepIndex !== index);
      });

      if (backButton) {
        const isFirstStep = index === 0;
        backButton.classList.toggle("hidden", isFirstStep);
        backButton.disabled = isFirstStep;
        backButton.classList.toggle("opacity-60", isFirstStep);
        backButton.classList.toggle("cursor-not-allowed", isFirstStep);
      }

      if (nextButton) {
        const isLastStep = index === totalSteps - 1;
        nextButton.classList.toggle("hidden", isLastStep);
        nextButton.disabled = isLastStep;
        nextButton.classList.toggle("opacity-60", isLastStep);
      }

      submitButton.classList.toggle("hidden", index !== totalSteps - 1);

      if (stepCounter) {
        stepCounter.textContent = `Step ${index + 1} of ${totalSteps} Â· ${stepLabels[index]}`;
      }

      toggleNavigationDisabled(false);
      clearStepError();
    }

    function updateTemplateSections(resetResponses: boolean = false) {
      const selectedId = getSelectedTemplateId();
      let hasMatch = false;

      templateSections.forEach((section) => {
        const matches = section.dataset.templateQuestions === selectedId;
        section.classList.toggle("hidden", !matches);

        const inputs = section.querySelectorAll<
          HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
        >("[data-question-input]");

        inputs.forEach((input) => {
          const shouldDisable = !matches;
          input.disabled = shouldDisable;

          if (shouldDisable && resetResponses) {
            if (input instanceof HTMLInputElement && input.type === "checkbox") {
              input.checked = false;
            } else if (input instanceof HTMLSelectElement) {
              input.selectedIndex = 0;
            } else {
              input.value = "";
            }
          }
        });

        if (matches) {
          hasMatch = true;
        }
      });

      if (questionsPlaceholder) {
        questionsPlaceholder.classList.toggle("hidden", hasMatch);
      }
    }

    function collectFollowUpAnswers(
      templateId: string,
      requireResponses: boolean = false,
    ): TemplateAnswer[] {
      const section = Array.from(templateSections).find(
        (node) => node.dataset.templateQuestions === templateId,
      );

      if (!section) {
        return [];
      }

      const answers: TemplateAnswer[] = [];
      const missing: string[] = [];

      const questionNodes = section.querySelectorAll<HTMLElement>("[data-question-id]");

      questionNodes.forEach((node) => {
        const questionId = node.dataset.questionId ?? "";
        const questionPrompt = node.dataset.questionPrompt ?? "";
        const type = node.dataset.questionType ?? "text";

        if (!questionId || !questionPrompt) {
          return;
        }

        if (type === "multi-select") {
          const inputs = Array.from(
            section.querySelectorAll<HTMLInputElement>(
              `[data-question-input="${questionId}"]`,
            ),
          );
          const selectedValues = inputs
            .filter((input) => input.checked)
            .map((input) => input.value.trim())
            .filter((value) => value.length > 0);

          if (selectedValues.length === 0) {
            if (requireResponses) {
              missing.push(questionPrompt);
            }
          } else {
            answers.push({
              questionId,
              question: questionPrompt,
              type,
              response: selectedValues,
            });
          }

          return;
        }

        const input = node.querySelector<
          HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
        >(`[data-question-input="${questionId}"]`);

        if (!input) {
          return;
        }

        const value = input.value.trim();

        if (!value) {
          if (requireResponses) {
            missing.push(questionPrompt);
          }
        } else {
          answers.push({
            questionId,
            question: questionPrompt,
            type,
            response: value,
          });
        }
      });

      if (requireResponses && missing.length > 0) {
        throw new Error(
          `Please complete the following questions: ${missing.join(", ")}`,
        );
      }

      return answers;
    }

    function validateStep(stepIndex: number): boolean {
      clearStepError();

      if (stepIndex === 0) {
        if (!getSelectedTemplateId()) {
          showStepError("Please select a template to continue.");
          return false;
        }
      }

      if (stepIndex === 1) {
        const templateId = getSelectedTemplateId();
        if (!templateId) {
          showStepError("Please return to step 1 and choose a template.");
          currentStepIndex = 0;
          showStep(currentStepIndex);
          return false;
        }

        try {
          collectFollowUpAnswers(templateId, true);
        } catch (error) {
          showStepError(
            error instanceof Error
              ? error.message
              : "Please answer the contextual questions.",
          );
          return false;
        }
      }

      return true;
    }

    updateTemplateSections();
    showStep(currentStepIndex);

    templateRadios.forEach((radio) => {
      radio.addEventListener("change", () => {
        updateTemplateSections(true);
        clearStepError();
      });
    });

    nextButton?.addEventListener("click", () => {
      if (!validateStep(currentStepIndex)) {
        return;
      }

      if (currentStepIndex < totalSteps - 1) {
        currentStepIndex += 1;
        showStep(currentStepIndex);
        window.scrollTo({ top: 0, behavior: "smooth" });
      }
    });

    backButton?.addEventListener("click", () => {
      if (currentStepIndex > 0) {
        currentStepIndex -= 1;
        showStep(currentStepIndex);
        window.scrollTo({ top: 0, behavior: "smooth" });
      }
    });

    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      clearStepError();
      errorMessage.classList.add("hidden");
      errorMessageText.textContent = "";

      const templateId = getSelectedTemplateId();
      if (!templateId) {
        currentStepIndex = 0;
        showStep(currentStepIndex);
        showStepError("Please select a template before creating your project.");
        return;
      }

      let answers: TemplateAnswer[];
      try {
        answers = collectFollowUpAnswers(templateId, true);
      } catch (validationError) {
        currentStepIndex = 1;
        showStep(currentStepIndex);
        showStepError(
          validationError instanceof Error
            ? validationError.message
            : "Please answer the contextual questions.",
        );
        return;
      }

      if (!form.checkValidity()) {
        form.reportValidity();
        currentStepIndex = totalSteps - 1;
        showStep(currentStepIndex);
        return;
      }

      const selectedTemplate = templates.find(
        (template) => template.id === templateId,
      );

      if (!selectedTemplate) {
        currentStepIndex = 0;
        showStep(currentStepIndex);
        showStepError("We couldn't load that template. Please select it again.");
        return;
      }

      const structuredAnswers = selectedTemplate.followUpQuestions?.length
        ? selectedTemplate.followUpQuestions.map((question) => {
            const answer = answers.find(
              (item) => item.questionId === question.id,
            );
            if (!answer) {
              return {
                questionId: question.id,
                question: question.prompt,
                type: question.type,
                response: question.type === "multi-select" ? [] : "",
              } satisfies TemplateAnswer;
            }

            return answer;
          })
        : answers;

      submitButton.disabled = true;
      submitButton.classList.add("opacity-70", "cursor-not-allowed");
      buttonText.textContent = "Creating Project...";
      loadingSpinner.classList.remove("hidden");
      toggleNavigationDisabled(true);

      progressContainer.classList.add("hidden");
      progressItems.innerHTML = "";

      try {
        const formData = new FormData(form);
        const projectName = (formData.get("projectName") as string) ?? "";
        const projectDescription =
          (formData.get("projectDescription") as string) ?? "";
        const keyObjectives = (formData.get("keyObjectives") as string) ?? "";
        const projectImage = (formData.get("projectImage") as string) ?? "";
        const selectedDiagrams = formData.getAll("selectedDiagrams") as string[];

        if (selectedDiagrams.length > 1) {
          progressContainer.classList.remove("hidden");

          const diagramNames: Record<string, string> = {
            erd: "ERD",
            architecture: "Architecture",
            c4: "C4 Diagram",
            "user-stories": "User Stories",
            gantt: "Gantt Chart",
            kanban: "Kanban",
          };

          selectedDiagrams.forEach((diagramId) => {
            const item = document.createElement("div");
            item.className = "flex items-center gap-2 text-sm";
            item.innerHTML = `
              <div class="animate-spin rounded-full h-3 w-3 border-b border-[#3ba7d1]"></div>
              <span class="text-white">Generating ${diagramNames[diagramId] || diagramId}...</span>
            `;
            progressItems.appendChild(item);
          });
        }

        const projectResponse = await fetch("/api/projects/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: projectName,
            description: projectDescription,
            keyObjectives,
            image: projectImage,
          }),
        });

        if (!projectResponse.ok) {
          throw new Error(`Failed to create project: ${projectResponse.status}`);
        }

        const projectResult = await projectResponse.json();

        if (!projectResult.success) {
          throw new Error(projectResult.error || "Failed to create project");
        }

        const isAnonymous = Boolean(projectResult.isAnonymous);
        const projectId = projectResult.projectId as string | undefined;

        if (!isAnonymous && !projectId) {
          throw new Error("Missing project identifier from server response");
        }

        const resolvedProjectId =
          projectId ||
          (typeof crypto !== "undefined" && "randomUUID" in crypto
            ? crypto.randomUUID()
            : `temp-${Date.now()}`);

        const templateMetadata = {
          id: selectedTemplate.id,
          name: selectedTemplate.name,
          vertical: selectedTemplate.vertical,
          verticalId: selectedTemplate.verticalId,
          summary: selectedTemplate.summary,
          recommendedStack: selectedTemplate.recommendedStack,
        };

        localStorage.setItem(
          "projectData",
          JSON.stringify({
            id: resolvedProjectId,
            name: projectName,
            description: projectDescription,
            keyObjectives,
            image: projectImage,
            selectedDiagrams,
            template: templateMetadata,
            followUpAnswers: structuredAnswers,
          }),
        );

        const aiResponse = await fetch(`${workerUrl}/api/ai`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            project: {
              name: projectName,
              description: projectDescription,
              keyObjectives,
              image: projectImage,
            },
            template: templateMetadata,
            followUpAnswers: structuredAnswers,
            selectedDiagrams,
          }),
        });

        if (!aiResponse.ok) {
          throw new Error(`AI service error: ${aiResponse.status}`);
        }

        const aiResult = await aiResponse.json();

        const failedDiagrams = Object.entries(aiResult.results || {})
          .filter(([, result]: [string, any]) => !result.success)
          .map(
            ([diagramId, result]: [string, any]) =>
              `${diagramId}: ${result.error || "unknown error"}`,
          );

        if (failedDiagrams.length > 0) {
          console.warn("Some diagrams failed to generate:", failedDiagrams);
        }

        localStorage.setItem("aiResponse", JSON.stringify(aiResult));

        if (!isAnonymous && projectId) {
          const transformedAIAnalysis =
            transformWorkerResponseToAIAnalysis(aiResult);
          const updateResponse = await fetch(
            `/api/projects/${projectId}/ai-analysis`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ aiAnalysis: transformedAIAnalysis }),
            },
          );

          if (!updateResponse.ok) {
            console.warn(
              "Failed to update project with AI analysis, but continuing...",
            );
          }
        }

        if (isAnonymous) {
          window.location.href = "/new-project/ai-response";
        } else if (projectId) {
          window.location.href = `/projects/${projectId}`;
        }
      } catch (error) {
        console.error("Error creating project:", error);

        errorMessageText.textContent =
          error instanceof Error
            ? error.message
            : "An unexpected error occurred";
        errorMessage.classList.remove("hidden");
        progressContainer.classList.add("hidden");

        submitButton.disabled = false;
        submitButton.classList.remove("opacity-70", "cursor-not-allowed");
        buttonText.textContent = "Create Project";
        loadingSpinner.classList.add("hidden");
        toggleNavigationDisabled(false);
      }
    });
  });
</script>
