---
import MainLayout from "@layouts/MainLayout.astro";
import ImageSelector from "@/components/ImageSelector.astro";
import DiagramSelector from "@/components/DiagramSelector.astro";
import { projectTemplates, projectVerticals } from "@/data/projectTemplates";
import { app } from "../../firebase/server";
import { getAuth } from "firebase-admin/auth";

const auth = getAuth(app);

const templatesByVertical = projectVerticals
  .map((vertical) => ({
    ...vertical,
    templates: projectTemplates.filter(
      (template) => template.verticalId === vertical.id,
    ),
  }))
  .filter((vertical) => vertical.templates.length > 0);

const templatePayload = JSON.stringify({
  templates: projectTemplates,
  verticals: projectVerticals,
});

// Get current user (allow anonymous users)
let user: {
  displayName?: string | null;
  email?: string | null;
  isAnonymous?: boolean;
  uid?: string;
} | null = null;
if (Astro.cookies.has("__session")) {
  try {
    const sessionCookie = Astro.cookies.get("__session")?.value;
    const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");
    const userRecord = await auth.getUser(decodedCookie.uid);
    user = {
      displayName: userRecord.displayName,
      email: userRecord.email,
      isAnonymous: userRecord.providerData.length === 0,
      uid: userRecord.uid,
    };
  } catch (error) {
    // For anonymous users, we'll create a temporary user object
    user = {
      displayName: null,
      email: null,
      isAnonymous: true,
      uid: `anonymous_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    };
  }
} else {
  return Astro.redirect("/signin");
}
---

<MainLayout user={user}>
  <div class="flex flex-1 justify-center py-5">
    <div
      class="layout-content-container flex flex-col w-[512px] max-w-[512px] py-5"
    >
      <h2
        class="text-white tracking-light text-[28px] font-bold leading-tight px-4 text-center pb-3 pt-5"
      >
        Start a new project
      </h2>

      {
        user?.isAnonymous && (
          <div class="mx-4 mb-4 p-3 bg-[#374151] rounded-lg border border-[#4b5563]">
            <p class="text-[#d1d5db] text-sm">
              <strong>Guest Mode:</strong> You're creating a project as a guest.
              Your project will be saved temporarily.
              <a href="/signin" class="text-[#3ba7d1] hover:underline">
                Sign in
              </a>{" "}
              to save your projects permanently.
            </p>
          </div>
        )
      }

      <ol
        id="stepTracker"
        class="flex items-center justify-between px-4 pb-4 text-xs text-[#94a3b3]"
      >
        <li data-step-index="1" class="font-semibold text-white">
          <span class="block uppercase tracking-wide">Step 1</span>
          <span class="text-sm">Template</span>
        </li>
        <li data-step-index="2" class="opacity-60">
          <span class="block uppercase tracking-wide">Step 2</span>
          <span class="text-sm">Context</span>
        </li>
        <li data-step-index="3" class="opacity-60">
          <span class="block uppercase tracking-wide">Step 3</span>
          <span class="text-sm">Details</span>
        </li>
      </ol>

      <form id="projectForm" class="flex flex-col gap-4 px-4" novalidate>
        <input type="hidden" name="selectedTemplateId" id="selectedTemplateId" />

        <section
          data-step="1"
          class="step-panel flex flex-col gap-4"
          aria-labelledby="template-step-title"
        >
          <div class="flex flex-col gap-1">
            <h3
              id="template-step-title"
              class="text-white text-lg font-semibold leading-tight"
            >
              Choose a project template
            </h3>
            <p class="text-[#94a3b3] text-sm">
              Pick the closest blueprint and we'll tailor follow-up questions and
              diagram generation around it.
            </p>
          </div>

          <div class="flex flex-col gap-6">
            {
              templatesByVertical.map((vertical) => (
                <div class="flex flex-col gap-3" data-vertical-id={vertical.id}>
                  <div>
                    <h4 class="text-white text-base font-semibold">
                      {vertical.label}
                    </h4>
                    <p class="text-[#94a3b3] text-sm">{vertical.description}</p>
                  </div>

                  <div class="flex flex-col gap-3">
                    {vertical.templates.map((template) => (
                      <label
                        class="template-card relative flex cursor-pointer flex-col gap-3 rounded-lg border border-[#223649] bg-[#0d1722] p-4 transition-colors focus-within:outline-none focus-within:ring-2 focus-within:ring-[#3ba7d1]"
                        data-template-id={template.id}
                        data-template-name={template.name}
                      >
                        <input
                          type="radio"
                          name="templateOption"
                          value={template.id}
                          class="sr-only"
                          aria-label={`Select ${template.name}`}
                        />
                        <div class="flex flex-col gap-1">
                          <span class="text-white text-sm font-semibold">
                            {template.name}
                          </span>
                          <p class="text-[#94a3b3] text-sm">
                            {template.description}
                          </p>
                        </div>
                        <div class="flex flex-wrap items-center gap-2">
                          <span class="text-[#94a3b3] text-xs uppercase tracking-wide">
                            Recommended Stack
                          </span>
                          <div class="flex flex-wrap gap-2">
                            {template.recommendedStack.map((item) => (
                              <span
                                class="rounded-full bg-[#142238] px-2 py-1 text-xs font-medium text-[#cbd5f5]"
                              >
                                {item}
                              </span>
                            ))}
                          </div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>
              ))
            }
          </div>

          <div class="flex justify-end pt-2">
            <button
              type="button"
              id="goToQuestions"
              class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-11 px-6 bg-[#3ba7d1] text-white text-sm font-medium leading-normal transition-colors disabled:cursor-not-allowed disabled:bg-[#1f2d3a]"
              disabled
            >
              Continue
            </button>
          </div>
        </section>

        <section
          data-step="2"
          class="step-panel hidden flex flex-col gap-4"
          aria-labelledby="context-step-title"
        >
          <div class="flex flex-col gap-1">
            <h3
              id="context-step-title"
              class="text-white text-lg font-semibold leading-tight"
            >
              Provide project context
            </h3>
            <p id="context-step-description" class="text-[#94a3b3] text-sm">
              Answer a few follow-up questions so the assistant can ground its
              recommendations.
            </p>
          </div>

          <div id="questionContainer" class="flex flex-col gap-4"></div>

          <div id="noQuestionsMessage" class="hidden rounded-lg border border-[#223649] bg-[#101b29] p-4">
            <p class="text-[#94a3b3] text-sm">
              This template doesn't require extra information. You can continue
              to project details.
            </p>
          </div>

          <div class="flex items-center justify-between pt-2">
            <button
              type="button"
              id="backToTemplates"
              class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-11 px-6 border border-[#223649] bg-transparent text-white text-sm font-medium leading-normal hover:border-[#3ba7d1] hover:text-[#3ba7d1] transition-colors"
            >
              Back
            </button>
            <button
              type="button"
              id="goToDetails"
              class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-11 px-6 bg-[#3ba7d1] text-white text-sm font-medium leading-normal transition-colors"
            >
              Continue
            </button>
          </div>
        </section>

        <section
          data-step="3"
          class="step-panel hidden flex flex-col gap-4"
          aria-labelledby="details-step-title"
        >
          <div class="flex flex-col gap-1">
            <h3
              id="details-step-title"
              class="text-white text-lg font-semibold leading-tight"
            >
              Project details & diagrams
            </h3>
            <p class="text-[#94a3b3] text-sm">
              Share the essentials and select which diagrams or plans you want
              the AI to generate.
            </p>
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="projectName"
              class="text-white text-sm font-medium leading-normal"
            >
              Project Name
            </label>
            <input
              type="text"
              name="projectName"
              id="projectName"
              class="flex h-12 w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="Enter your project name"
              required
            />
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="projectDescription"
              class="text-white text-sm font-medium leading-normal"
            >
              Project Description
            </label>
            <textarea
              name="projectDescription"
              id="projectDescription"
              rows="4"
              class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="Describe your project in detail..."
              required
            ></textarea>
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="keyObjectives"
              class="text-white text-sm font-medium leading-normal"
            >
              Key Objectives
            </label>
            <textarea
              name="keyObjectives"
              id="keyObjectives"
              rows="3"
              class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="What are the main goals of this project?"
              required
            ></textarea>
          </div>

          <ImageSelector name="projectImage" selectedImage="alpha" />

          <DiagramSelector />

          <div class="flex items-center justify-between pt-2">
            <button
              type="button"
              id="backToQuestions"
              class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-11 px-6 border border-[#223649] bg-transparent text-white text-sm font-medium leading-normal hover:border-[#3ba7d1] hover:text-[#3ba7d1] transition-colors"
            >
              Back
            </button>
            <button
              type="submit"
              id="submitButton"
              class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-12 px-6 bg-[#3ba7d1] text-white text-sm font-medium leading-normal hover:bg-[#2e85a8] transition-colors"
            >
              <span id="buttonText">Create Project</span>
              <div
                id="loadingSpinner"
                class="hidden animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2"
              >
              </div>
            </button>
          </div>

          <div id="progressContainer" class="hidden mt-4 space-y-2">
            <p class="text-white text-sm font-medium">Generating diagrams...</p>
            <div id="progressItems" class="space-y-1">
              <!-- Progress items will be added here dynamically -->
            </div>
          </div>
        </section>
      </form>

      <div
        id="errorMessage"
        class="hidden mx-4 mt-4 p-3 bg-red-900/20 border border-red-500/50 rounded-lg"
      >
        <p class="text-red-400 text-sm"></p>
      </div>
    </div>
  </div>

  <script type="application/json" id="template-data">
    {templatePayload}
  </script>
</MainLayout>

<script>
  import {
    createPendingAIAnalysis,
    DIAGRAM_CONFIG,
    extractPartialAIAnalysisFromWorker,
    isValidDiagramId,
  } from "@/utils/aiAnalysis";
  import type { DiagramId } from "@/utils/aiAnalysis";
  import { FIRESTORE_COLLECTIONS } from "@/constants/firestore";
  import { app as firebaseApp } from "@/firebase/client";
  import { doc, getFirestore, onSnapshot } from "firebase/firestore";

  type TemplateQuestionType = "text" | "textarea" | "select";
  type TemplateQuestion = {
    id: string;
    prompt: string;
    type: TemplateQuestionType;
    helperText?: string;
    options?: string[];
    required?: boolean;
  };
  type ProjectTemplate = {
    id: string;
    name: string;
    description: string;
    verticalId: string;
    recommendedStack: string[];
    followUpQuestions: TemplateQuestion[];
  };
  type ProjectVertical = {
    id: string;
    label: string;
  };

  document.addEventListener("astro:page-load", () => {
    const workerUrl =
      import.meta.env.PUBLIC_WORKER_URL ??
      "https://docucraft-worker.joaquinarturoaprendizaje.workers.dev";
    const form = document.getElementById("projectForm") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submitButton",
    ) as HTMLButtonElement;
    const buttonText = document.getElementById("buttonText") as HTMLSpanElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner",
    ) as HTMLDivElement;
    const errorMessage = document.getElementById(
      "errorMessage",
    ) as HTMLDivElement;
    const progressContainer = document.getElementById(
      "progressContainer",
    ) as HTMLDivElement;
    const progressItems = document.getElementById(
      "progressItems",
    ) as HTMLDivElement;
    const templateDataElement = document.getElementById(
      "template-data",
    ) as HTMLScriptElement | null;
    const stepTracker = document.getElementById("stepTracker");

    if (
      !form ||
      !submitButton ||
      !buttonText ||
      !loadingSpinner ||
      !errorMessage ||
      !stepTracker
    ) {
      console.error("Required form elements not found");
      return;
    }

    const db = getFirestore(firebaseApp);
    let unsubscribeProgress: (() => void) | null = null;

    const templateData = templateDataElement?.textContent
      ? (JSON.parse(templateDataElement.textContent) as {
          templates: ProjectTemplate[];
          verticals: ProjectVertical[];
        })
      : { templates: [], verticals: [] };

    const templateMap = new Map<string, ProjectTemplate>(
      templateData.templates.map((template) => [template.id, template]),
    );
    const verticalMap = new Map<string, ProjectVertical>(
      templateData.verticals.map((vertical) => [vertical.id, vertical]),
    );

    const stepPanels = Array.from(
      form.querySelectorAll<HTMLElement>(".step-panel"),
    );
    let currentStep = 1;
    let selectedTemplateId: string | null = null;
    let followUpAnswers: Record<string, string> = {};

    const templateCards = Array.from(
      form.querySelectorAll<HTMLLabelElement>("[data-template-id]"),
    );
    const templateHiddenInput = document.getElementById(
      "selectedTemplateId",
    ) as HTMLInputElement | null;
    const questionContainer = document.getElementById(
      "questionContainer",
    ) as HTMLDivElement | null;
    const contextDescription = document.getElementById(
      "context-step-description",
    ) as HTMLParagraphElement | null;
    const contextHeading = document.getElementById(
      "context-step-title",
    ) as HTMLHeadingElement | null;
    const noQuestionsMessage = document.getElementById(
      "noQuestionsMessage",
    ) as HTMLDivElement | null;
    const goToQuestionsButton = document.getElementById(
      "goToQuestions",
    ) as HTMLButtonElement | null;
    const goToDetailsButton = document.getElementById(
      "goToDetails",
    ) as HTMLButtonElement | null;
    const backToTemplatesButton = document.getElementById(
      "backToTemplates",
    ) as HTMLButtonElement | null;
    const backToQuestionsButton = document.getElementById(
      "backToQuestions",
    ) as HTMLButtonElement | null;

    const updateStepVisibility = (nextStep: number) => {
      currentStep = nextStep;
      stepPanels.forEach((panel) => {
        const stepValue = Number(panel.dataset.step);
        if (!Number.isNaN(stepValue)) {
          if (stepValue === currentStep) {
            panel.classList.remove("hidden");
          } else {
            panel.classList.add("hidden");
          }
        }
      });

      const indicatorItems = Array.from(
        stepTracker.querySelectorAll<HTMLElement>("[data-step-index]"),
      );
      indicatorItems.forEach((item) => {
        const stepIndex = Number(item.dataset.stepIndex);
        if (stepIndex === currentStep) {
          item.classList.remove("opacity-60");
          item.classList.add("text-white", "font-semibold");
        } else {
          item.classList.add("opacity-60");
          item.classList.remove("font-semibold", "text-white");
        }
      });
    };

    const clearTemplateCardStates = () => {
      templateCards.forEach((card) => {
        card.classList.remove("border-[#3ba7d1]", "bg-[#132032]");
        card.classList.add("border-[#223649]", "bg-[#0d1722]");
      });
    };

    const renderQuestions = (template: ProjectTemplate) => {
      followUpAnswers = {};

      if (!questionContainer || !noQuestionsMessage) {
        return;
      }

      questionContainer.innerHTML = "";

      if (template.followUpQuestions.length === 0) {
        noQuestionsMessage.classList.remove("hidden");
        return;
      }

      noQuestionsMessage.classList.add("hidden");

      template.followUpQuestions.forEach((question) => {
        const wrapper = document.createElement("div");
        wrapper.className = "flex flex-col gap-2";

        const label = document.createElement("label");
        label.className = "text-white text-sm font-medium leading-normal";
        label.htmlFor = `question-${question.id}`;
        label.textContent = question.prompt;

        const helper = question.helperText
          ? (() => {
              const helperText = document.createElement("p");
              helperText.className = "text-[#94a3b3] text-xs";
              helperText.textContent = question.helperText;
              return helperText;
            })()
          : null;

        let input:
          | HTMLInputElement
          | HTMLTextAreaElement
          | HTMLSelectElement;

        if (question.type === "textarea") {
          input = document.createElement("textarea");
          input.rows = 3;
          input.className =
            "flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm";
        } else if (question.type === "select") {
          input = document.createElement("select");
          input.className =
            "flex h-12 w-full rounded-lg border border-[#223649] bg-[#0c1520] px-4 text-white focus:border-[#3ba7d1] focus:outline-none text-sm";

          const placeholderOption = document.createElement("option");
          placeholderOption.value = "";
          placeholderOption.textContent = "Select an option";
          placeholderOption.disabled = true;
          placeholderOption.selected = true;
          input.appendChild(placeholderOption);

          (question.options ?? []).forEach((option) => {
            const opt = document.createElement("option");
            opt.value = option;
            opt.textContent = option;
            input.appendChild(opt);
          });
        } else {
          input = document.createElement("input");
          input.type = "text";
          input.className =
            "flex h-12 w-full rounded-lg border border-[#223649] bg-[#0c1520] px-4 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm";
        }

        input.id = `question-${question.id}`;
        input.dataset.questionId = question.id;
        input.dataset.required = question.required ? "true" : "false";

        wrapper.appendChild(label);
        if (helper) {
          wrapper.appendChild(helper);
        }
        wrapper.appendChild(input);
        questionContainer.appendChild(wrapper);
      });
    };

    const handleTemplateSelection = (templateId: string | null) => {
      if (!templateHiddenInput || !goToQuestionsButton) {
        return;
      }

      if (!templateId) {
        selectedTemplateId = null;
        templateHiddenInput.value = "";
        goToQuestionsButton.disabled = true;
        return;
      }

      const template = templateMap.get(templateId);

      if (!template) {
        selectedTemplateId = null;
        templateHiddenInput.value = "";
        goToQuestionsButton.disabled = true;
        return;
      }

      clearTemplateCardStates();

      const activeCard = templateCards.find(
        (card) => card.dataset.templateId === templateId,
      );
      if (activeCard) {
        activeCard.classList.remove("border-[#223649]", "bg-[#0d1722]");
        activeCard.classList.add("border-[#3ba7d1]", "bg-[#132032]");
      }

      selectedTemplateId = templateId;
      templateHiddenInput.value = templateId;
      goToQuestionsButton.disabled = false;

      if (contextHeading) {
        contextHeading.textContent = `Provide project context for ${template.name}`;
      }

      if (contextDescription) {
        const verticalLabel = verticalMap.get(template.verticalId)?.label;
        contextDescription.textContent = verticalLabel
          ? `${template.description} (${verticalLabel})`
          : template.description;
      }

      renderQuestions(template);
    };

    templateCards.forEach((card) => {
      const templateId = card.dataset.templateId;
      const radio = card.querySelector("input[type='radio']") as
        | HTMLInputElement
        | null;

      card.addEventListener("click", (event) => {
        event.preventDefault();
        if (radio) {
          radio.checked = true;
        }
        handleTemplateSelection(templateId ?? null);
      });

      if (radio) {
        radio.addEventListener("change", () => {
          handleTemplateSelection(templateId ?? null);
        });
      }
    });

    const validateFollowUpAnswers = (): boolean => {
      if (!selectedTemplateId) {
        return false;
      }

      const template = templateMap.get(selectedTemplateId);
      if (!template || !questionContainer) {
        return false;
      }

      let isValid = true;
      followUpAnswers = {};

      template.followUpQuestions.forEach((question) => {
        const input = questionContainer.querySelector<
          HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
        >(`[data-question-id="${question.id}"]`);

        if (!input) {
          return;
        }

        const value = input.value.trim();
        if (question.required && value.length === 0) {
          input.classList.add("border-red-500");
          isValid = false;
        } else {
          input.classList.remove("border-red-500");
        }

        if (value.length > 0) {
          followUpAnswers[question.id] = value;
        }
      });

      if (!isValid) {
        const errorText = errorMessage.querySelector("p");
        if (errorText) {
          errorText.textContent =
            "Please answer the required contextual questions before continuing.";
        }
        errorMessage.classList.remove("hidden");
      } else {
        errorMessage.classList.add("hidden");
      }

      return isValid;
    };

    const goToStep = (targetStep: number) => {
      updateStepVisibility(targetStep);
      window.scrollTo({ top: 0, behavior: "smooth" });
    };

    goToQuestionsButton?.addEventListener("click", () => {
      if (!selectedTemplateId) {
        return;
      }
      errorMessage.classList.add("hidden");
      goToStep(2);
    });

    goToDetailsButton?.addEventListener("click", () => {
      if (!selectedTemplateId) {
        return;
      }

      const template = templateMap.get(selectedTemplateId);
      if (!template) {
        return;
      }

      if (template.followUpQuestions.length > 0) {
        if (!validateFollowUpAnswers()) {
          return;
        }
      }

      errorMessage.classList.add("hidden");
      goToStep(3);
    });

    backToTemplatesButton?.addEventListener("click", () => {
      errorMessage.classList.add("hidden");
      goToStep(1);
    });

    backToQuestionsButton?.addEventListener("click", () => {
      errorMessage.classList.add("hidden");
      goToStep(2);
    });

    const renderProgress = (
      diagrams: DiagramId[],
      aiAnalysis: Record<string, any>,
    ) => {
      if (!progressContainer || !progressItems) {
        return;
      }

      progressContainer.classList.remove("hidden");
      progressItems.innerHTML = "";

      const statusClasses: Record<string, string> = {
        pending: "bg-yellow-500/10 text-yellow-300 border border-yellow-500/40", // amber
        completed:
          "bg-emerald-500/10 text-emerald-300 border border-emerald-500/40",
        failed: "bg-red-500/10 text-red-300 border border-red-500/40",
      };

      diagrams.forEach((diagramId) => {
        const config = DIAGRAM_CONFIG[diagramId];
        const status =
          (aiAnalysis?.[config.statusField] as keyof typeof statusClasses) ||
          "pending";
        const label = config.label;
        const chipClass = statusClasses[status] || statusClasses.pending;
        const item = document.createElement("div");
        item.className =
          "flex items-center justify-between rounded-lg border border-[#1f2937] bg-[#111827] px-3 py-2";
        item.innerHTML = `
          <span class="text-white text-sm font-medium">${label}</span>
          <span class="text-xs font-medium px-2 py-1 rounded-full ${chipClass}">
            ${status.charAt(0).toUpperCase() + status.slice(1)}
          </span>
        `;
        progressItems.appendChild(item);
      });
    };

    const setupProgressListener = (
      userId: string,
      projectId: string,
      diagrams: DiagramId[],
    ) => {
      if (!userId || !projectId || diagrams.length === 0) {
        return null;
      }

      const projectDoc = doc(
        db,
        FIRESTORE_COLLECTIONS.USER_PROJECTS,
        userId,
        FIRESTORE_COLLECTIONS.PROJECTS,
        projectId,
      );

      return onSnapshot(projectDoc, (snapshot) => {
        const data = snapshot.data() ?? {};
        const aiAnalysis = (data.aiAnalysis as Record<string, any>) || {};
        renderProgress(diagrams, aiAnalysis);
      });
    };

    document.addEventListener("astro:beforeunload", () => {
      if (unsubscribeProgress) {
        unsubscribeProgress();
        unsubscribeProgress = null;
      }
    });

    updateStepVisibility(currentStep);

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!selectedTemplateId) {
        const errorText = errorMessage.querySelector("p");
        if (errorText) {
          errorText.textContent = "Please select a template to continue.";
        }
        errorMessage.classList.remove("hidden");
        return;
      }

      errorMessage.classList.add("hidden");

      const template = templateMap.get(selectedTemplateId);
      if (!template) {
        const errorText = errorMessage.querySelector("p");
        if (errorText) {
          errorText.textContent = "The selected template could not be found.";
        }
        errorMessage.classList.remove("hidden");
        return;
      }

      if (template.followUpQuestions.length > 0 && !validateFollowUpAnswers()) {
        return;
      }

      // Reset error message
      errorMessage.classList.add("hidden");

      // Set loading state
      submitButton.disabled = true;
      buttonText.textContent = "Creating Project...";
      loadingSpinner.classList.remove("hidden");

      try {
        // Get form data
        const formData = new FormData(form);
        const projectName = formData.get("projectName") as string;
        const projectDescription = formData.get("projectDescription") as string;
        const keyObjectives = formData.get("keyObjectives") as string;
        const projectImage = formData.get("projectImage") as string;
        const selectedDiagrams = formData.getAll(
          "selectedDiagrams",
        ) as string[];
        const validDiagramIds = selectedDiagrams.filter(
          (diagram): diagram is DiagramId => isValidDiagramId(diagram),
        );

        // Show progress for selected diagrams
        if (validDiagramIds.length > 0) {
          renderProgress(
            validDiagramIds,
            createPendingAIAnalysis(validDiagramIds),
          );
        }

        const followUpAnswerList = template.followUpQuestions
          .map((question) => ({
            id: question.id,
            prompt: question.prompt,
            answer: followUpAnswers[question.id] ?? "",
          }))
          .filter((entry) => entry.answer.trim().length > 0);

        const templateVertical = verticalMap.get(template.verticalId);

        // First, create the project in Firestore
        const projectResponse = await fetch("/api/projects/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
            image: projectImage,
            selectedDiagrams: validDiagramIds,
            template: {
              id: template.id,
              name: template.name,
              description: template.description,
              verticalId: template.verticalId,
              verticalLabel: templateVertical?.label,
              recommendedStack: template.recommendedStack,
            },
            followUpAnswers: followUpAnswerList,
          }),
        });

        if (!projectResponse.ok) {
          throw new Error(
            `Failed to create project: ${projectResponse.status}`,
          );
        }

        const projectResult = await projectResponse.json();

        if (!projectResult.success) {
          throw new Error(projectResult.error || "Failed to create project");
        }

        const isAnonymous = Boolean(projectResult.isAnonymous);
        const projectId = projectResult.projectId;

        if (!isAnonymous && !projectId) {
          throw new Error("Missing project identifier from server response");
        }

        const resolvedProjectId =
          projectId ||
          (typeof crypto !== "undefined" && "randomUUID" in crypto
            ? crypto.randomUUID()
            : `temp-${Date.now()}`);

        // Store project data in localStorage for the save functionality
        const projectPayload = {
          id: resolvedProjectId,
          name: projectName,
          description: projectDescription,
          keyObjectives: keyObjectives,
          image: projectImage,
          selectedDiagrams: validDiagramIds,
          template: {
            id: template.id,
            name: template.name,
            description: template.description,
            verticalId: template.verticalId,
            verticalLabel: templateVertical?.label ?? null,
            recommendedStack: template.recommendedStack,
          },
          followUpAnswers: followUpAnswerList,
        };

        localStorage.setItem("projectData", JSON.stringify(projectPayload));

        if (unsubscribeProgress) {
          unsubscribeProgress();
          unsubscribeProgress = null;
        }

        if (!isAnonymous && projectId && validDiagramIds.length > 0) {
          unsubscribeProgress = setupProgressListener(
            projectResult.userId,
            projectId,
            validDiagramIds,
          );
        }

        const aggregatedResults: Record<string, any> = {};

        const requestPayload = {
          project: {
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
          },
          template: {
            id: template.id,
            name: template.name,
            description: template.description,
            verticalId: template.verticalId,
            verticalLabel: templateVertical?.label ?? null,
            recommendedStack: template.recommendedStack,
          },
          followUpAnswers: followUpAnswerList,
          selectedDiagrams: [] as string[],
        };

        for (const diagramId of validDiagramIds) {
          try {
            const aiResponse = await fetch(`${workerUrl}/api/ai`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                ...requestPayload,
                selectedDiagrams: [diagramId],
              }),
            });

            if (!aiResponse.ok) {
              throw new Error(`AI service error: ${aiResponse.status}`);
            }

            const aiResult = await aiResponse.json();
            const diagramResult = aiResult.results?.[diagramId];

            if (diagramResult) {
              aggregatedResults[diagramId] = diagramResult;
            } else {
              aggregatedResults[diagramId] = {
                success: false,
                status: "failed",
                error: "No result returned",
              };
            }

            if (!isAnonymous && projectId) {
              const partialUpdate = extractPartialAIAnalysisFromWorker(
                diagramId,
                aiResult,
              );

              const partialResponse = await fetch(
                `/api/projects/${projectId}/ai-analysis/partial`,
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    partialAIAnalysis: partialUpdate,
                  }),
                },
              );

              if (!partialResponse.ok) {
                console.warn("Failed to persist partial AI analysis update");
              }
            }
          } catch (error) {
            console.error(`Error generating ${diagramId}:`, error);

            aggregatedResults[diagramId] = {
              success: false,
              error: error instanceof Error ? error.message : "Unknown error",
              status: "failed",
            };

            if (!isAnonymous && projectId) {
              const failureStatus = {
                [DIAGRAM_CONFIG[diagramId].statusField]: "failed",
              };

              const failureResponse = await fetch(
                `/api/projects/${projectId}/ai-analysis/partial`,
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    partialAIAnalysis: failureStatus,
                  }),
                },
              );

              if (!failureResponse.ok) {
                console.warn(
                  "Failed to persist failure status for diagram",
                  diagramId,
                );
              }
            }
          }
        }

        const aiResult = {
          success: true,
          results: aggregatedResults,
        };

        localStorage.setItem("aiResponse", JSON.stringify(aiResult));

        if (isAnonymous) {
          window.location.href = "/new-project/ai-response";
        } else {
          window.location.href = `/projects/${projectId}`;
        }
      } catch (error) {
        console.error("Error creating project:", error);

        const errorText = errorMessage.querySelector("p");
        if (errorText) {
          errorText.textContent =
            error instanceof Error
              ? error.message
              : "An unexpected error occurred";
        }
        errorMessage.classList.remove("hidden");

        submitButton.disabled = false;
        buttonText.textContent = "Create Project";
        loadingSpinner.classList.add("hidden");
        progressContainer?.classList.add("hidden");
      }
    });
  });
</script>
