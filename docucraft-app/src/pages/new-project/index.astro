---
import MainLayout from "@layouts/MainLayout.astro";
import ImageSelector from "@/components/ImageSelector.astro";
import DiagramSelector from "@/components/DiagramSelector.astro";
import { app } from "../../firebase/server";
import { getAuth } from "firebase-admin/auth";

const auth = getAuth(app);

// Get current user (allow anonymous users)
let user: {
  displayName?: string | null;
  email?: string | null;
  isAnonymous?: boolean;
  uid?: string;
} | null = null;
if (Astro.cookies.has("__session")) {
  try {
    const sessionCookie = Astro.cookies.get("__session")?.value;
    const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");
    const userRecord = await auth.getUser(decodedCookie.uid);
    user = {
      displayName: userRecord.displayName,
      email: userRecord.email,
      isAnonymous: userRecord.providerData.length === 0,
      uid: userRecord.uid,
    };
  } catch (error) {
    // For anonymous users, we'll create a temporary user object
    user = {
      displayName: null,
      email: null,
      isAnonymous: true,
      uid: `anonymous_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    };
  }
} else {
  return Astro.redirect("/signin");
}
---

<MainLayout user={user}>
  <div class="flex flex-1 justify-center py-5">
    <div
      class="layout-content-container flex flex-col w-[512px] max-w-[512px] py-5"
    >
      <h2
        class="text-white tracking-light text-[28px] font-bold leading-tight px-4 text-center pb-3 pt-5"
      >
        Start a new project
      </h2>

      {
        user?.isAnonymous && (
          <div class="mx-4 mb-4 p-3 bg-[#374151] rounded-lg border border-[#4b5563]">
            <p class="text-[#d1d5db] text-sm">
              <strong>Guest Mode:</strong> You're creating a project as a guest.
              Your project will be saved temporarily.
              <a href="/signin" class="text-[#3ba7d1] hover:underline">
                Sign in
              </a>{" "}
              to save your projects permanently.
            </p>
          </div>
        )
      }

      <form id="projectForm" class="flex flex-col gap-4 px-4" novalidate>
        <div class="flex flex-col gap-2">
          <label
            for="projectName"
            class="text-white text-sm font-medium leading-normal"
          >
            Project Name
          </label>
          <input
            type="text"
            name="projectName"
            id="projectName"
            class="flex h-12 w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
            placeholder="Enter your project name"
            required
          />
        </div>

        <div class="flex flex-col gap-2">
          <label
            for="projectDescription"
            class="text-white text-sm font-medium leading-normal"
          >
            Project Description
          </label>
          <textarea
            name="projectDescription"
            id="projectDescription"
            rows="4"
            class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
            placeholder="Describe your project in detail..."
            required></textarea>
        </div>

        <div class="flex flex-col gap-2">
          <label
            for="keyObjectives"
            class="text-white text-sm font-medium leading-normal"
          >
            Key Objectives
          </label>
          <textarea
            name="keyObjectives"
            id="keyObjectives"
            rows="3"
            class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
            placeholder="What are the main goals of this project?"
            required></textarea>
        </div>

        <ImageSelector name="projectImage" selectedImage="alpha" />

        <DiagramSelector />

        <button
          type="submit"
          id="submitButton"
          class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-12 px-6 bg-[#3ba7d1] text-white text-sm font-medium leading-normal hover:bg-[#2e85a8] transition-colors mt-2"
        >
          <span id="buttonText">Create Project</span>
          <div
            id="loadingSpinner"
            class="hidden animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2"
          >
          </div>
        </button>

        <div id="progressContainer" class="hidden mt-4 space-y-2">
          <p class="text-white text-sm font-medium">Generating diagrams...</p>
          <div id="progressItems" class="space-y-1">
            <!-- Progress items will be added here dynamically -->
          </div>
        </div>
      </form>

      <div
        id="errorMessage"
        class="hidden mx-4 mt-4 p-3 bg-red-900/20 border border-red-500/50 rounded-lg"
      >
        <p class="text-red-400 text-sm"></p>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  import {
    createPendingAIAnalysis,
    DIAGRAM_CONFIG,
    extractPartialAIAnalysisFromWorker,
    isValidDiagramId,
  } from "@/utils/aiAnalysis";
  import type { DiagramId } from "@/utils/aiAnalysis";
  import { FIRESTORE_COLLECTIONS } from "@/constants/firestore";
  import { app as firebaseApp } from "@/firebase/client";
  import { doc, getFirestore, onSnapshot } from "firebase/firestore";

  // Use astro:page-load to ensure this runs on every page navigation
  document.addEventListener("astro:page-load", () => {
    const workerUrl = import.meta.env.PUBLIC_WORKER_URL;
    const form = document.getElementById("projectForm") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submitButton"
    ) as HTMLButtonElement;
    const buttonText = document.getElementById("buttonText") as HTMLSpanElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner"
    ) as HTMLDivElement;
    const errorMessage = document.getElementById(
      "errorMessage"
    ) as HTMLDivElement;
    const progressContainer = document.getElementById(
      "progressContainer"
    ) as HTMLDivElement;
    const progressItems = document.getElementById(
      "progressItems"
    ) as HTMLDivElement;

    if (
      !form ||
      !submitButton ||
      !buttonText ||
      !loadingSpinner ||
      !errorMessage
    ) {
      console.error("Required form elements not found");
      return;
    }

    const db = getFirestore(firebaseApp);
    let unsubscribeProgress: (() => void) | null = null;

    const renderProgress = (
      diagrams: DiagramId[],
      aiAnalysis: Record<string, any>
    ) => {
      if (!progressContainer || !progressItems) {
        return;
      }

      progressContainer.classList.remove("hidden");
      progressItems.innerHTML = "";

      const statusClasses: Record<string, string> = {
        pending:
          "bg-yellow-500/10 text-yellow-300 border border-yellow-500/40", // amber
        completed:
          "bg-emerald-500/10 text-emerald-300 border border-emerald-500/40",
        failed:
          "bg-red-500/10 text-red-300 border border-red-500/40",
      };

      diagrams.forEach((diagramId) => {
        const config = DIAGRAM_CONFIG[diagramId];
        const status =
          (aiAnalysis?.[config.statusField] as keyof typeof statusClasses) ||
          "pending";
        const label = config.label;
        const chipClass = statusClasses[status] || statusClasses.pending;
        const item = document.createElement("div");
        item.className =
          "flex items-center justify-between rounded-lg border border-[#1f2937] bg-[#111827] px-3 py-2";
        item.innerHTML = `
          <span class="text-white text-sm font-medium">${label}</span>
          <span class="text-xs font-medium px-2 py-1 rounded-full ${chipClass}">
            ${status.charAt(0).toUpperCase() + status.slice(1)}
          </span>
        `;
        progressItems.appendChild(item);
      });
    };

    const setupProgressListener = (
      userId: string,
      projectId: string,
      diagrams: DiagramId[]
    ) => {
      if (!userId || !projectId || diagrams.length === 0) {
        return null;
      }

      const projectDoc = doc(
        db,
        FIRESTORE_COLLECTIONS.USER_PROJECTS,
        userId,
        FIRESTORE_COLLECTIONS.PROJECTS,
        projectId
      );

      return onSnapshot(projectDoc, (snapshot) => {
        const data = snapshot.data() ?? {};
        const aiAnalysis = (data.aiAnalysis as Record<string, any>) || {};
        renderProgress(diagrams, aiAnalysis);
      });
    };

    document.addEventListener("astro:beforeunload", () => {
      if (unsubscribeProgress) {
        unsubscribeProgress();
        unsubscribeProgress = null;
      }
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Reset error message
      errorMessage.classList.add("hidden");

      // Set loading state
      submitButton.disabled = true;
      buttonText.textContent = "Creating Project...";
      loadingSpinner.classList.remove("hidden");

      try {
        // Get form data
        const formData = new FormData(form);
        const projectName = formData.get("projectName") as string;
        const projectDescription = formData.get("projectDescription") as string;
        const keyObjectives = formData.get("keyObjectives") as string;
        const projectImage = formData.get("projectImage") as string;
        const selectedDiagrams = formData.getAll(
          "selectedDiagrams"
        ) as string[];
        const validDiagramIds = selectedDiagrams.filter((diagram): diagram is DiagramId =>
          isValidDiagramId(diagram)
        );

        // Show progress for selected diagrams
        if (validDiagramIds.length > 0) {
          renderProgress(
            validDiagramIds,
            createPendingAIAnalysis(validDiagramIds)
          );
        }

        // Create the AI request text
        const aiRequestText = `Project Name: ${projectName}

Project Description: ${projectDescription}

Key Objectives: ${keyObjectives}`;

        // First, create the project in Firestore
        const projectResponse = await fetch("/api/projects/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
            image: projectImage,
            selectedDiagrams: validDiagramIds,
          }),
        });

        if (!projectResponse.ok) {
          throw new Error(
            `Failed to create project: ${projectResponse.status}`
          );
        }

        const projectResult = await projectResponse.json();

        if (!projectResult.success) {
          throw new Error(projectResult.error || "Failed to create project");
        }

        const isAnonymous = Boolean(projectResult.isAnonymous);
        const projectId = projectResult.projectId;

        if (!isAnonymous && !projectId) {
          throw new Error("Missing project identifier from server response");
        }

        const resolvedProjectId =
          projectId ||
          (typeof crypto !== "undefined" && "randomUUID" in crypto
            ? crypto.randomUUID()
            : `temp-${Date.now()}`);

        // Store project data in localStorage for the save functionality
        localStorage.setItem(
          "projectData",
          JSON.stringify({
            id: resolvedProjectId,
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
            image: projectImage,
            selectedDiagrams: validDiagramIds,
          })
        );

        if (unsubscribeProgress) {
          unsubscribeProgress();
          unsubscribeProgress = null;
        }

        if (!isAnonymous && projectId && validDiagramIds.length > 0) {
          unsubscribeProgress = setupProgressListener(
            projectResult.userId,
            projectId,
            validDiagramIds
          );
        }

        const aggregatedResults: Record<string, any> = {};

        for (const diagramId of validDiagramIds) {
          try {
            const aiResponse = await fetch(`${workerUrl}/api/ai`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                text: aiRequestText,
                selectedDiagrams: [diagramId],
              }),
            });

            if (!aiResponse.ok) {
              throw new Error(`AI service error: ${aiResponse.status}`);
            }

            const aiResult = await aiResponse.json();
            const diagramResult = aiResult.results?.[diagramId];

            if (diagramResult) {
              aggregatedResults[diagramId] = diagramResult;
            } else {
              aggregatedResults[diagramId] = {
                success: false,
                status: "failed",
                error: "No result returned",
              };
            }

            if (!isAnonymous && projectId) {
              const partialUpdate = extractPartialAIAnalysisFromWorker(
                diagramId,
                aiResult
              );

              const partialResponse = await fetch(`/api/projects/${projectId}/ai-analysis/partial`, {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  partialAIAnalysis: partialUpdate,
                }),
              });

              if (!partialResponse.ok) {
                console.warn("Failed to persist partial AI analysis update");
              }
            }
          } catch (error) {
            console.error(`Error generating ${diagramId}:`, error);

            aggregatedResults[diagramId] = {
              success: false,
              error:
                error instanceof Error
                  ? error.message
                  : "Unknown error",
              status: "failed",
            };

            if (!isAnonymous && projectId) {
              const failureStatus = {
                [DIAGRAM_CONFIG[diagramId].statusField]: "failed",
              };

              const failureResponse = await fetch(`/api/projects/${projectId}/ai-analysis/partial`, {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  partialAIAnalysis: failureStatus,
                }),
              });

              if (!failureResponse.ok) {
                console.warn("Failed to persist failure status for diagram", diagramId);
              }
            }
          }
        }

        const aiResult = {
          success: true,
          results: aggregatedResults,
        };

        localStorage.setItem("aiResponse", JSON.stringify(aiResult));

        // Check if user is anonymous from the API response
        if (isAnonymous) {
          // Redirect to the AI response page for anonymous users
          window.location.href = "/new-project/ai-response";
        } else {
          // Redirect to the specific project page for authenticated users
          window.location.href = `/projects/${projectId}`;
        }
      } catch (error) {
        console.error("Error creating project:", error);

        // Show error message
        const errorText = errorMessage.querySelector("p");
        if (errorText) {
          errorText.textContent =
            error instanceof Error
              ? error.message
              : "An unexpected error occurred";
        }
        errorMessage.classList.remove("hidden");

        // Reset button state
        submitButton.disabled = false;
        buttonText.textContent = "Create Project";
        loadingSpinner.classList.add("hidden");
        progressContainer.classList.add("hidden");
      }
    });
  });
</script>
