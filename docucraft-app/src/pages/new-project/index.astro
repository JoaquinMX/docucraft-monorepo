---
import MainLayout from "@layouts/MainLayout.astro";
import ImageSelector from "@/components/ImageSelector.astro";
import DiagramSelector from "@/components/DiagramSelector.astro";
import { app } from "../../firebase/server";
import { getAuth } from "firebase-admin/auth";
import { FirestoreServerService } from "@/services/firestore-server";
import type { UserBillingProfile } from "@/types/Billing";
import { GENERATION_CREDIT_COST } from "@/constants/billing";

const auth = getAuth(app);

// Get current user (allow anonymous users)
let user: {
  displayName?: string | null;
  email?: string | null;
  isAnonymous?: boolean;
  uid?: string;
} | null = null;
let billingProfile: UserBillingProfile | null = null;
const generationCreditCost = GENERATION_CREDIT_COST;
if (Astro.cookies.has("__session")) {
  try {
    const sessionCookie = Astro.cookies.get("__session")?.value;
    const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");
    const userRecord = await auth.getUser(decodedCookie.uid);
    user = {
      displayName: userRecord.displayName,
      email: userRecord.email,
      isAnonymous: userRecord.providerData.length === 0,
      uid: userRecord.uid,
    };

    if (!user.isAnonymous && user.uid) {
      billingProfile = await FirestoreServerService.getOrCreateUserBillingProfile(
        user.uid
      );
    }
  } catch (error) {
    // For anonymous users, we'll create a temporary user object
    user = {
      displayName: null,
      email: null,
      isAnonymous: true,
      uid: `anonymous_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    };
  }
} else {
  return Astro.redirect("/signin");
}
---

<MainLayout user={user}>
  <div class="flex flex-1 justify-center py-5">
    <div
      class="layout-content-container flex flex-col w-[512px] max-w-[512px] py-5"
    >
      <h2
        class="text-white tracking-light text-[28px] font-bold leading-tight px-4 text-center pb-3 pt-5"
      >
        Start a new project
      </h2>

      { 
        user?.isAnonymous && (
          <div class="mx-4 mb-4 p-3 bg-[#374151] rounded-lg border border-[#4b5563]">
            <p class="text-[#d1d5db] text-sm">
              <strong>Guest Mode:</strong> You're creating a project as a guest.
              Your project will be saved temporarily.
              <a href="/signin" class="text-[#3ba7d1] hover:underline">
                Sign in
              </a>{" "}
              to save your projects permanently.
            </p>
          </div>
        )
      }

      {
        !user?.isAnonymous && billingProfile && (
          <div class="mx-4 mb-4 p-3 bg-[#102132] rounded-lg border border-[#1e3446]">
            <div class="flex flex-col gap-1 text-sm text-[#d1d5db]">
              <p>
                <strong>Credits:</strong>{" "}
                {billingProfile.subscriptionActive ? (
                  <span>Subscription active â€” unlimited generations.</span>
                ) : (
                  <span>
                    <span id="creditBalance">
                      {billingProfile.creditsRemaining}
                    </span>{" "}
                    credits remaining.
                  </span>
                )}
              </p>
              <a
                href="/billing"
                class="text-[#3ba7d1] font-medium hover:underline"
              >
                Manage billing &amp; add more credits
              </a>
            </div>
          </div>
        )
      }

      <form id="projectForm" class="flex flex-col gap-4 px-4" novalidate>
        <div class="flex flex-col gap-2">
          <label
            for="projectName"
            class="text-white text-sm font-medium leading-normal"
          >
            Project Name
          </label>
          <input
            type="text"
            name="projectName"
            id="projectName"
            class="flex h-12 w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
            placeholder="Enter your project name"
            required
          />
        </div>

        <div class="flex flex-col gap-2">
          <label
            for="projectDescription"
            class="text-white text-sm font-medium leading-normal"
          >
            Project Description
          </label>
          <textarea
            name="projectDescription"
            id="projectDescription"
            rows="4"
            class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
            placeholder="Describe your project in detail..."
            required></textarea>
        </div>

        <div class="flex flex-col gap-2">
          <label
            for="keyObjectives"
            class="text-white text-sm font-medium leading-normal"
          >
            Key Objectives
          </label>
          <textarea
            name="keyObjectives"
            id="keyObjectives"
            rows="3"
            class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
            placeholder="What are the main goals of this project?"
            required></textarea>
        </div>

        <ImageSelector name="projectImage" selectedImage="alpha" />

        <DiagramSelector />

        <button
          type="submit"
          id="submitButton"
          class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-12 px-6 bg-[#3ba7d1] text-white text-sm font-medium leading-normal hover:bg-[#2e85a8] transition-colors mt-2"
        >
          <span id="buttonText">Create Project</span>
          <div
            id="loadingSpinner"
            class="hidden animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2"
          >
          </div>
        </button>

        <div id="progressContainer" class="hidden mt-4 space-y-2">
          <p class="text-white text-sm font-medium">Generating diagrams...</p>
          <div id="progressItems" class="space-y-1">
            <!-- Progress items will be added here dynamically -->
          </div>
        </div>
      </form>

      <div
        id="errorMessage"
        class="hidden mx-4 mt-4 p-3 bg-red-900/20 border border-red-500/50 rounded-lg"
      >
        <p class="text-red-400 text-sm"></p>
      </div>
    </div>
  </div>
</MainLayout>

<script type="application/json" id="billing-info">
  {JSON.stringify({
    isAnonymous: user?.isAnonymous ?? false,
    billingProfile,
    generationCreditCost,
  })}
</script>

<script>
  import { transformWorkerResponseToAIAnalysis } from "@/utils/validation";

  // Use astro:page-load to ensure this runs on every page navigation
  document.addEventListener("astro:page-load", () => {
    const workerUrl = import.meta.env.PUBLIC_WORKER_URL;
    const form = document.getElementById("projectForm") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submitButton"
    ) as HTMLButtonElement;
    const buttonText = document.getElementById("buttonText") as HTMLSpanElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner"
    ) as HTMLDivElement;
    const errorMessage = document.getElementById(
      "errorMessage"
    ) as HTMLDivElement;
    const progressContainer = document.getElementById(
      "progressContainer"
    ) as HTMLDivElement;
    const progressItems = document.getElementById(
      "progressItems"
    ) as HTMLDivElement;
    const errorText = errorMessage.querySelector("p");
    const billingInfoElement = document.getElementById("billing-info");
    const billingInfoData = billingInfoElement?.textContent
      ? JSON.parse(billingInfoElement.textContent)
      : {};
    const creditBalanceElement = document.getElementById(
      "creditBalance"
    ) as HTMLSpanElement | null;

    type BillingProfileState = {
      creditsRemaining?: number;
      subscriptionActive?: boolean;
    } | null;

    let isAnonymousUser = Boolean(billingInfoData?.isAnonymous);
    let billingProfileState =
      (billingInfoData?.billingProfile as BillingProfileState) ?? null;
    const generationCost = Number(
      billingInfoData?.generationCreditCost ?? 1
    ) || 1;

    const updateCreditBalance = (profile: BillingProfileState) => {
      if (!profile || profile.subscriptionActive) {
        return;
      }

      if (creditBalanceElement) {
        creditBalanceElement.textContent = String(
          profile.creditsRemaining ?? 0
        );
      }
    };

    const showErrorMessage = (message: string) => {
      if (errorText) {
        errorText.textContent = message;
      }
      errorMessage.classList.remove("hidden");
    };

    const resetButtonState = () => {
      submitButton.disabled = false;
      buttonText.textContent = "Create Project";
      loadingSpinner.classList.add("hidden");
      progressContainer.classList.add("hidden");
      progressItems.innerHTML = "";
    };

    const hasActiveSubscription = () =>
      Boolean(billingProfileState?.subscriptionActive);

    const hasEnoughCredits = () =>
      hasActiveSubscription() ||
      Number(billingProfileState?.creditsRemaining ?? 0) >= generationCost;

    if (
      !form ||
      !submitButton ||
      !buttonText ||
      !loadingSpinner ||
      !errorMessage
    ) {
      console.error("Required form elements not found");
      return;
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Reset error message
      errorMessage.classList.add("hidden");
      progressItems.innerHTML = "";
      progressContainer.classList.add("hidden");

      if (isAnonymousUser) {
        showErrorMessage(
          "Sign in to run DocuCraft AI and manage your credits from the billing page."
        );
        resetButtonState();
        return;
      }

      if (!billingProfileState) {
        showErrorMessage(
          "We couldn't load your billing profile. Refresh the page and try again."
        );
        resetButtonState();
        return;
      }

      if (!hasEnoughCredits()) {
        const creditLabel =
          generationCost === 1 ? "1 credit" : `${generationCost} credits`;
        showErrorMessage(
          `You need at least ${creditLabel} to generate with DocuCraft AI. Visit the billing page to top up.`
        );
        resetButtonState();
        return;
      }

      // Set loading state
      submitButton.disabled = true;
      buttonText.textContent = "Creating Project...";
      loadingSpinner.classList.remove("hidden");

      try {
        // Get form data
        const formData = new FormData(form);
        const projectName = formData.get("projectName") as string;
        const projectDescription = formData.get("projectDescription") as string;
        const keyObjectives = formData.get("keyObjectives") as string;
        const projectImage = formData.get("projectImage") as string;
        const selectedDiagrams = formData.getAll("selectedDiagrams") as string[];

        // Show progress for selected diagrams
        if (selectedDiagrams.length > 1) {
          progressContainer.classList.remove("hidden");
          progressItems.innerHTML = "";

          // Get diagram names from the mockdata (assuming it's available)
          const diagramNames: Record<string, string> = {
            erd: "ERD",
            architecture: "Architecture",
            c4: "C4 Diagram",
            "user-stories": "User Stories",
            gantt: "Gantt Chart",
            kanban: "Kanban",
          };

          selectedDiagrams.forEach((diagramId: string) => {
            const item = document.createElement("div");
            item.className = "flex items-center gap-2 text-sm";
            item.innerHTML = `
              <div class="animate-spin rounded-full h-3 w-3 border-b border-[#3ba7d1]"></div>
              <span class="text-white">Generating ${diagramNames[diagramId] || diagramId}...</span>
            `;
            progressItems.appendChild(item);
          });
        }

        // Create the AI request text
        const aiRequestText = `Project Name: ${projectName}

Project Description: ${projectDescription}

Key Objectives: ${keyObjectives}`;

        // First, create the project in Firestore
        const projectResponse = await fetch("/api/projects/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
            image: projectImage,
          }),
        });

        if (!projectResponse.ok) {
          throw new Error(
            `Failed to create project: ${projectResponse.status}`
          );
        }

        const projectResult = await projectResponse.json();

        if (!projectResult.success) {
          throw new Error(projectResult.error || "Failed to create project");
        }

        const isAnonymous = Boolean(projectResult.isAnonymous);
        isAnonymousUser = isAnonymous;
        const projectId = projectResult.projectId;

        if (!isAnonymous && !projectId) {
          throw new Error("Missing project identifier from server response");
        }

        const resolvedProjectId =
          projectId ||
          (typeof crypto !== "undefined" && "randomUUID" in crypto
            ? crypto.randomUUID()
            : `temp-${Date.now()}`);

        // Store project data in localStorage for the save functionality
        localStorage.setItem(
          "projectData",
          JSON.stringify({
            id: resolvedProjectId,
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
            image: projectImage,
            selectedDiagrams: selectedDiagrams,
          })
        );

        // Call the AI endpoint
        const aiResponse = await fetch(`${workerUrl}/api/ai`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            text: aiRequestText,
            selectedDiagrams: selectedDiagrams,
          }),
        });

        if (!aiResponse.ok) {
          throw new Error(`AI service error: ${aiResponse.status}`);
        }

        const aiResult = await aiResponse.json();

        // Check for any failed diagrams
        const failedDiagrams = Object.entries(aiResult.results || {})
          .filter(([_, result]: [string, any]) => !result.success)
          .map(([diagramId, result]: [string, any]) => `${diagramId}: ${result.error}`);

        if (failedDiagrams.length > 0) {
          console.warn("Some diagrams failed to generate:", failedDiagrams);
          // Continue with successful diagrams, but log the failures
        }

        if (!isAnonymous) {
          try {
            const consumeResponse = await fetch("/api/billing/consume", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ amount: generationCost }),
            });

            const consumePayload = await consumeResponse.json();

            if (!consumeResponse.ok || !consumePayload.success) {
              throw new Error(
                consumePayload.error ?? "Unable to deduct credits from your account"
              );
            }

            billingProfileState = consumePayload.profile as BillingProfileState;
            updateCreditBalance(billingProfileState);
          } catch (consumeError) {
            throw consumeError instanceof Error
              ? consumeError
              : new Error("Unable to deduct credits from your account");
          }
        }

        // Store the AI response in localStorage for the next page
        localStorage.setItem("aiResponse", JSON.stringify(aiResult));

        // Update the project with AI analysis for authenticated users only
        if (!isAnonymous && projectId) {
          const transformedAIAnalysis = transformWorkerResponseToAIAnalysis(aiResult);
          const updateResponse = await fetch(
            `/api/projects/${projectId}/ai-analysis`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                aiAnalysis: transformedAIAnalysis,
              }),
            }
          );

          if (!updateResponse.ok) {
            console.warn(
              "Failed to update project with AI analysis, but continuing..."
            );
          }
        }

        // Check if user is anonymous from the API response
        if (isAnonymous) {
          // Redirect to the AI response page for anonymous users
          window.location.href = "/new-project/ai-response";
        } else {
          // Redirect to the specific project page for authenticated users
          window.location.href = `/projects/${projectId}`;
        }
      } catch (error) {
        console.error("Error creating project:", error);

        // Show error message
        showErrorMessage(
          error instanceof Error
            ? error.message
            : "An unexpected error occurred"
        );

        // Reset button state
        resetButtonState();
      }
    });
  });
</script>
