---
import MainLayout from "@layouts/MainLayout.astro";
import ImageSelector from "@/components/ImageSelector.astro";
import DiagramSelector from "@/components/DiagramSelector.astro";
import { projectTemplates } from "@/data/projectTemplates";
import { app } from "../../firebase/server";
import { getAuth } from "firebase-admin/auth";

const auth = getAuth(app);

// Get current user (allow anonymous users)
let user: {
  displayName?: string | null;
  email?: string | null;
  isAnonymous?: boolean;
  uid?: string;
} | null = null;
if (Astro.cookies.has("__session")) {
  try {
    const sessionCookie = Astro.cookies.get("__session")?.value;
    const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");
    const userRecord = await auth.getUser(decodedCookie.uid);
    user = {
      displayName: userRecord.displayName,
      email: userRecord.email,
      isAnonymous: userRecord.providerData.length === 0,
      uid: userRecord.uid,
    };
  } catch (error) {
    // For anonymous users, we'll create a temporary user object
    user = {
      displayName: null,
      email: null,
      isAnonymous: true,
      uid: `anonymous_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    };
  }
} else {
  return Astro.redirect("/signin");
}
---

const serializedTemplates = JSON.stringify(projectTemplates);

<MainLayout user={user}>
  <div class="flex flex-1 justify-center py-5">
    <div
      class="layout-content-container flex flex-col w-[512px] max-w-[512px] py-5"
    >
      <h2
        class="text-white tracking-light text-[28px] font-bold leading-tight px-4 text-center pb-3 pt-5"
      >
        Start a new project
      </h2>

      {
        user?.isAnonymous && (
          <div class="mx-4 mb-4 p-3 bg-[#374151] rounded-lg border border-[#4b5563]">
            <p class="text-[#d1d5db] text-sm">
              <strong>Guest Mode:</strong> You're creating a project as a guest.
              Your project will be saved temporarily.
              <a href="/signin" class="text-[#3ba7d1] hover:underline">
                Sign in
              </a>{" "}
              to save your projects permanently.
            </p>
          </div>
        )
      }
      <form id="projectForm" class="flex flex-col gap-6 px-4" novalidate>
        <input type="hidden" id="templateId" name="templateId" />

        <section data-step="1" class="flex flex-col gap-4">
          <div>
            <h3 class="text-white text-lg font-semibold">1. Choose a starting template</h3>
            <p class="text-[#94a3b3] text-sm">
              Select the product vertical that best reflects your idea. We will use it to pre-seed relevant architecture, diagrams, and follow-up prompts.
            </p>
          </div>

          <div id="templateOptions" class="flex flex-col gap-3">
            {
              projectTemplates.map((template) => (
                <label
                  class="group border border-[#223649] bg-[#0c1520] rounded-xl p-4 cursor-pointer hover:border-[#3ba7d1] transition-colors"
                  data-template-card
                >
                  <div class="flex items-start gap-3">
                    <input
                      type="radio"
                      name="templateOption"
                      value={template.id}
                      class="mt-1 h-4 w-4 text-[#3ba7d1] focus:ring-[#3ba7d1]"
                      data-template-id={template.id}
                    />
                    <div class="flex flex-col gap-1">
                      <div class="flex items-center gap-2">
                        <span class="text-white font-semibold text-base">{template.name}</span>
                        <span class="text-xs px-2 py-0.5 rounded-full bg-[#1f2937] text-[#9ca3af]">{template.vertical}</span>
                      </div>
                      <p class="text-[#94a3b3] text-sm leading-relaxed">{template.description}</p>
                    </div>
                  </div>
                </label>
              ))
            }
          </div>

          <p id="templateError" class="hidden text-xs text-red-400">
            Please choose a template to continue.
          </p>

          <div class="flex justify-end">
            <button
              type="button"
              id="toQuestions"
              class="px-4 py-2 bg-[#3ba7d1] text-white text-sm font-medium rounded-lg hover:bg-[#2e85a8] transition-colors"
            >
              Next: Contextual questions
            </button>
          </div>
        </section>

        <section data-step="2" class="hidden flex flex-col gap-4">
          <div>
            <h3 class="text-white text-lg font-semibold">2. Capture project context</h3>
            <p class="text-[#94a3b3] text-sm">
              Help us understand nuances about your idea so diagram prompts include the correct constraints.
            </p>
          </div>

          <div id="selectedTemplateSummary" class="border border-[#223649] bg-[#0c1520] rounded-xl p-4 text-sm text-[#d1d5db] hidden"></div>

          <div id="questionContainer" class="flex flex-col gap-4"></div>

          <p id="contextError" class="hidden text-xs text-red-400">
            Please provide answers for the highlighted questions.
          </p>

          <div class="flex justify-between">
            <button
              type="button"
              id="backToTemplates"
              class="px-4 py-2 bg-[#1f2937] text-white text-sm font-medium rounded-lg hover:bg-[#374151] transition-colors"
            >
              Back
            </button>
            <button
              type="button"
              id="toDetails"
              class="px-4 py-2 bg-[#3ba7d1] text-white text-sm font-medium rounded-lg hover:bg-[#2e85a8] transition-colors"
            >
              Next: Project details
            </button>
          </div>
        </section>

        <section data-step="3" class="hidden flex flex-col gap-4">
          <div>
            <h3 class="text-white text-lg font-semibold">3. Finalise project details</h3>
            <p class="text-[#94a3b3] text-sm">
              Provide the remaining details and choose which diagrams Docucraft should generate.
            </p>
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="projectName"
              class="text-white text-sm font-medium leading-normal"
            >
              Project Name
            </label>
            <input
              type="text"
              name="projectName"
              id="projectName"
              class="flex h-12 w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="Enter your project name"
              required
            />
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="projectDescription"
              class="text-white text-sm font-medium leading-normal"
            >
              Project Description
            </label>
            <textarea
              name="projectDescription"
              id="projectDescription"
              rows="4"
              class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="Describe your project in detail..."
              required></textarea>
          </div>

          <div class="flex flex-col gap-2">
            <label
              for="keyObjectives"
              class="text-white text-sm font-medium leading-normal"
            >
              Key Objectives
            </label>
            <textarea
              name="keyObjectives"
              id="keyObjectives"
              rows="3"
              class="flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-3 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
              placeholder="What are the main goals of this project?"
              required></textarea>
          </div>

          <ImageSelector name="projectImage" selectedImage="alpha" />

          <DiagramSelector />

          <div class="flex items-center justify-between gap-3 pt-2">
            <button
              type="button"
              id="backToQuestions"
              class="px-4 py-2 bg-[#1f2937] text-white text-sm font-medium rounded-lg hover:bg-[#374151] transition-colors"
            >
              Back
            </button>
            <button
              type="submit"
              id="submitButton"
              class="flex min-w-[84px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-12 px-6 bg-[#3ba7d1] text-white text-sm font-medium leading-normal hover:bg-[#2e85a8] transition-colors"
            >
              <span id="buttonText">Create Project</span>
              <div
                id="loadingSpinner"
                class="hidden animate-spin rounded-full h-4 w-4 border-b-2 border-white ml-2"
              >
              </div>
            </button>
          </div>

          <div id="progressContainer" class="hidden mt-4 space-y-2">
            <p class="text-white text-sm font-medium">Generating diagrams...</p>
            <div id="progressItems" class="space-y-1">
              <!-- Progress items will be added here dynamically -->
            </div>
          </div>
        </section>
      </form>

      <div
        id="errorMessage"
        class="hidden mx-4 mt-4 p-3 bg-red-900/20 border border-red-500/50 rounded-lg"
      >
        <p class="text-red-400 text-sm"></p>
      </div>
    </div>
  </div>
  <script type="application/json" id="projectTemplatesData">
    {serializedTemplates}
  </script>
</MainLayout>

<script>
  import {
    createPendingAIAnalysis,
    DIAGRAM_CONFIG,
    extractPartialAIAnalysisFromWorker,
    isValidDiagramId,
  } from "@/utils/aiAnalysis";
  import type { DiagramId } from "@/utils/aiAnalysis";
  import { FIRESTORE_COLLECTIONS } from "@/constants/firestore";
  import { app as firebaseApp } from "@/firebase/client";
  import { doc, getFirestore, onSnapshot } from "firebase/firestore";

  // Use astro:page-load to ensure this runs on every page navigation
  document.addEventListener("astro:page-load", () => {
    const workerUrl =
      import.meta.env.PUBLIC_WORKER_URL ??
      "https://docucraft-worker.joaquinarturoaprendizaje.workers.dev";
    const form = document.getElementById("projectForm") as HTMLFormElement;
    const submitButton = document.getElementById(
      "submitButton"
    ) as HTMLButtonElement;
    const buttonText = document.getElementById("buttonText") as HTMLSpanElement;
    const loadingSpinner = document.getElementById(
      "loadingSpinner"
    ) as HTMLDivElement;
    const errorMessage = document.getElementById(
      "errorMessage"
    ) as HTMLDivElement;
    const progressContainer = document.getElementById(
      "progressContainer"
    ) as HTMLDivElement;
    const progressItems = document.getElementById(
      "progressItems"
    ) as HTMLDivElement;

    const templateDataElement = document.getElementById(
      "projectTemplatesData"
    );

    type TemplateFollowUpQuestion = {
      id: string;
      question: string;
      type: "text" | "select" | "multi-select";
      helperText?: string;
      placeholder?: string;
      options?: string[];
    };

    type Template = {
      id: string;
      name: string;
      description: string;
      vertical: string;
      recommendedTechStack: {
        frontend?: string[];
        backend?: string[];
        database?: string[];
        infrastructure?: string[];
        notes?: string[];
      };
      followUpQuestions: TemplateFollowUpQuestion[];
    };

    const templates: Template[] = templateDataElement
      ? JSON.parse(templateDataElement.textContent ?? "[]")
      : [];

    const templateIdInput = document.getElementById(
      "templateId"
    ) as HTMLInputElement | null;
    const templateError = document.getElementById(
      "templateError"
    ) as HTMLElement | null;
    const contextError = document.getElementById(
      "contextError"
    ) as HTMLElement | null;
    const selectedTemplateSummary = document.getElementById(
      "selectedTemplateSummary"
    ) as HTMLDivElement | null;
    const questionContainer = document.getElementById(
      "questionContainer"
    ) as HTMLDivElement | null;
    const stepSections = Array.from(
      document.querySelectorAll<HTMLElement>("[data-step]")
    );
    const templateCards = Array.from(
      document.querySelectorAll<HTMLLabelElement>("[data-template-card]")
    );
    const templateRadios = Array.from(
      document.querySelectorAll<HTMLInputElement>('input[name="templateOption"]')
    );
    const toQuestionsButton = document.getElementById(
      "toQuestions"
    ) as HTMLButtonElement | null;
    const backToTemplatesButton = document.getElementById(
      "backToTemplates"
    ) as HTMLButtonElement | null;
    const backToQuestionsButton = document.getElementById(
      "backToQuestions"
    ) as HTMLButtonElement | null;
    const toDetailsButton = document.getElementById(
      "toDetails"
    ) as HTMLButtonElement | null;

    type ContextualAnswers = Record<string, string | string[]>;

    const wizardState: {
      selectedTemplateId: string;
      contextualAnswers: ContextualAnswers;
    } = {
      selectedTemplateId: templateIdInput?.value || "",
      contextualAnswers: {},
    };

    const setStep = (step: number) => {
      stepSections.forEach((section) => {
        const stepValue = Number(section.getAttribute("data-step"));
        if (stepValue === step) {
          section.classList.remove("hidden");
        } else {
          section.classList.add("hidden");
        }
      });

      if (step === 1 && templateError) {
        templateError.classList.add("hidden");
      }

      if (step === 2 && contextError) {
        contextError.classList.add("hidden");
      }
    };

    const updateTemplateStyles = () => {
      templateCards.forEach((card) => {
        const radio = card.querySelector<HTMLInputElement>('input[type="radio"]');
        if (radio?.checked) {
          card.classList.remove("border-[#223649]");
          card.classList.add("border-[#3ba7d1]", "bg-[#102032]");
        } else {
          card.classList.remove("border-[#3ba7d1]", "bg-[#102032]");
          card.classList.add("border-[#223649]");
        }
      });
    };

    const formatStackSection = (title: string, values?: string[]) => {
      if (!values || values.length === 0) {
        return "";
      }

      if (title === "Notes") {
        const items = values
          .map((note) => `<li class="list-disc list-inside text-[#d1d5db]">${note}</li>`)
          .join("");
        return `
          <div class="flex flex-col gap-1">
            <p class="text-[#9ca3af] text-xs uppercase tracking-wide">${title}</p>
            <ul class="space-y-1">
              ${items}
            </ul>
          </div>
        `;
      }

      return `
        <div class="flex flex-col gap-1">
          <p class="text-[#9ca3af] text-xs uppercase tracking-wide">${title}</p>
          <p class="text-[#d1d5db]">${values.join(", ")}</p>
        </div>
      `;
    };

    const renderTemplateSummary = (template: Template | null) => {
      if (!selectedTemplateSummary) {
        return;
      }

      if (!template) {
        selectedTemplateSummary.classList.add("hidden");
        selectedTemplateSummary.innerHTML = "";
        return;
      }

      const sections: Array<{ title: string; values?: string[] }> = [
        { title: "Frontend", values: template.recommendedTechStack.frontend },
        { title: "Backend", values: template.recommendedTechStack.backend },
        { title: "Database", values: template.recommendedTechStack.database },
        {
          title: "Infrastructure",
          values: template.recommendedTechStack.infrastructure,
        },
        { title: "Notes", values: template.recommendedTechStack.notes },
      ];

      const summaryHtml = sections
        .map((section) => formatStackSection(section.title, section.values))
        .filter(Boolean)
        .join("");

      selectedTemplateSummary.innerHTML = `
        <div class="flex flex-col gap-3">
          <div class="flex flex-col gap-1">
            <p class="text-white text-base font-semibold">${template.name}</p>
            <p class="text-[#9ca3af] text-xs uppercase tracking-wide">${template.vertical}</p>
          </div>
          <p class="text-[#94a3b3] text-sm">${template.description}</p>
          <div class="grid gap-3">
            ${summaryHtml}
          </div>
        </div>
      `;
      selectedTemplateSummary.classList.remove("hidden");
    };

    const renderQuestions = (
      template: Template,
      answers: ContextualAnswers = {}
    ) => {
      if (!questionContainer) {
        return;
      }

      questionContainer.innerHTML = "";

      template.followUpQuestions.forEach((question) => {
        const wrapper = document.createElement("div");
        wrapper.dataset.questionId = question.id;
        wrapper.dataset.questionType = question.type;
        wrapper.className = "flex flex-col gap-2 border border-[#1f2937] bg-[#0c1520] rounded-xl p-4";

        const label = document.createElement("label");
        label.className = "text-white text-sm font-medium";
        label.htmlFor = `question-${question.id}`;
        label.textContent = question.question;
        wrapper.appendChild(label);

        let inputElement: HTMLElement | null = null;

        if (question.type === "text") {
          const textarea = document.createElement("textarea");
          textarea.id = `question-${question.id}`;
          textarea.className =
            "flex w-full resize-none overflow-hidden rounded-lg border border-[#223649] bg-[#0c1520] px-3 py-2 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm";
          textarea.rows = 3;
          textarea.placeholder = question.placeholder ?? "";
          const value = answers[question.id];
          if (typeof value === "string") {
            textarea.value = value;
          }
          inputElement = textarea;
        } else if (question.type === "select") {
          const select = document.createElement("select");
          select.id = `question-${question.id}`;
          select.className =
            "flex h-11 w-full rounded-lg border border-[#223649] bg-[#0c1520] px-3 text-white focus:border-[#3ba7d1] focus:outline-none text-sm";
          const placeholderOption = document.createElement("option");
          placeholderOption.value = "";
          placeholderOption.textContent = "Select an option";
          select.appendChild(placeholderOption);

          (question.options ?? []).forEach((option) => {
            const optionElement = document.createElement("option");
            optionElement.value = option;
            optionElement.textContent = option;
            select.appendChild(optionElement);
          });

          const value = answers[question.id];
          if (typeof value === "string") {
            select.value = value;
          }

          inputElement = select;
        } else if (question.type === "multi-select") {
          const selectedValues = new Set(
            Array.isArray(answers[question.id])
              ? (answers[question.id] as string[])
              : []
          );
          const listWrapper = document.createElement("div");
          listWrapper.className = "flex flex-col gap-2";

          (question.options ?? []).forEach((option, index) => {
            const optionId = `question-${question.id}-${index}`;
            const optionWrapper = document.createElement("label");
            optionWrapper.className = "flex items-center gap-3 text-sm text-[#d1d5db]";
            const checkbox = document.createElement("input");
            checkbox.type = "checkbox";
            checkbox.value = option;
            checkbox.id = optionId;
            checkbox.className =
              "h-4 w-4 rounded border-[#223649] bg-[#0c1520] text-[#3ba7d1] focus:ring-[#3ba7d1]";
            checkbox.checked = selectedValues.has(option);
            optionWrapper.appendChild(checkbox);
            const optionLabel = document.createElement("span");
            optionLabel.textContent = option;
            optionWrapper.appendChild(optionLabel);
            listWrapper.appendChild(optionWrapper);
          });

          inputElement = listWrapper;
        }

        if (inputElement) {
          wrapper.appendChild(inputElement);
        }

        if (question.helperText) {
          const helper = document.createElement("p");
          helper.className = "text-[#94a3b3] text-xs";
          helper.textContent = question.helperText;
          wrapper.appendChild(helper);
        }

        const error = document.createElement("p");
        error.className = "hidden text-xs text-red-400";
        error.dataset.errorMessage = "true";
        error.textContent = "Please provide a response.";
        wrapper.appendChild(error);

        questionContainer.appendChild(wrapper);
      });
    };

    const getSelectedTemplateId = () =>
      templateRadios.find((radio) => radio.checked)?.value ||
      wizardState.selectedTemplateId;

    const collectContextualAnswers = (showErrors = false) => {
      const result: ContextualAnswers = {};
      let isValid = true;

      if (!questionContainer) {
        return { answers: result, isValid };
      }

      const questionBlocks = Array.from(
        questionContainer.querySelectorAll<HTMLElement>("[data-question-id]")
      );

      questionBlocks.forEach((block) => {
        const questionId = block.getAttribute("data-question-id") ?? "";
        const type = block.getAttribute("data-question-type");
        const errorMessage = block.querySelector<HTMLElement>("[data-error-message]");

        const markInvalid = () => {
          isValid = false;
          if (showErrors && errorMessage) {
            errorMessage.classList.remove("hidden");
          }
        };

        const clearInvalid = () => {
          if (errorMessage) {
            errorMessage.classList.add("hidden");
          }
        };

        if (type === "text") {
          const input = block.querySelector<HTMLInputElement | HTMLTextAreaElement>(
            "textarea, input"
          );
          const value = input?.value.trim();
          if (!value) {
            markInvalid();
          } else {
            clearInvalid();
            result[questionId] = value;
          }
        } else if (type === "select") {
          const select = block.querySelector<HTMLSelectElement>("select");
          const value = select?.value.trim();
          if (!value) {
            markInvalid();
          } else {
            clearInvalid();
            result[questionId] = value;
          }
        } else if (type === "multi-select") {
          const checked = Array.from(
            block.querySelectorAll<HTMLInputElement>('input[type="checkbox"]:checked')
          ).map((input) => input.value);
          if (checked.length === 0) {
            markInvalid();
          } else {
            clearInvalid();
            result[questionId] = checked;
          }
        }
      });

      if (contextError) {
        if (showErrors && !isValid) {
          contextError.classList.remove("hidden");
        } else if (isValid) {
          contextError.classList.add("hidden");
        }
      }

      return { answers: result, isValid };
    };

    templateRadios.forEach((radio) => {
      radio.addEventListener("change", () => {
        if (templateIdInput) {
          templateIdInput.value = radio.value;
        }
        updateTemplateStyles();
        if (templateError) {
          templateError.classList.add("hidden");
        }
      });
    });

    if (toQuestionsButton) {
      toQuestionsButton.addEventListener("click", () => {
        const selectedId = getSelectedTemplateId();
        const template = templates.find((item) => item.id === selectedId);

        if (!selectedId || !template) {
          if (templateError) {
            templateError.classList.remove("hidden");
          }
          return;
        }

        if (templateIdInput) {
          templateIdInput.value = selectedId;
        }

        if (wizardState.selectedTemplateId !== selectedId) {
          wizardState.contextualAnswers = {};
        }

        wizardState.selectedTemplateId = selectedId;
        renderTemplateSummary(template);
        renderQuestions(template, wizardState.contextualAnswers);
        setStep(2);
      });
    }

    if (backToTemplatesButton) {
      backToTemplatesButton.addEventListener("click", () => {
        setStep(1);
      });
    }

    if (backToQuestionsButton) {
      backToQuestionsButton.addEventListener("click", () => {
        setStep(2);
      });
    }

    if (toDetailsButton) {
      toDetailsButton.addEventListener("click", () => {
        const template = templates.find(
          (item) => item.id === wizardState.selectedTemplateId
        );

        if (!template) {
          if (templateError) {
            templateError.classList.remove("hidden");
          }
          setStep(1);
          return;
        }

        const { answers, isValid } = collectContextualAnswers(true);
        if (!isValid) {
          return;
        }

        wizardState.contextualAnswers = answers;
        setStep(3);
      });
    }

    updateTemplateStyles();
    setStep(1);

    if (
      !form ||
      !submitButton ||
      !buttonText ||
      !loadingSpinner ||
      !errorMessage
    ) {
      console.error("Required form elements not found");
      return;
    }

    const db = getFirestore(firebaseApp);
    let unsubscribeProgress: (() => void) | null = null;

    const renderProgress = (
      diagrams: DiagramId[],
      aiAnalysis: Record<string, any>
    ) => {
      if (!progressContainer || !progressItems) {
        return;
      }

      progressContainer.classList.remove("hidden");
      progressItems.innerHTML = "";

      const statusClasses: Record<string, string> = {
        pending: "bg-yellow-500/10 text-yellow-300 border border-yellow-500/40", // amber
        completed:
          "bg-emerald-500/10 text-emerald-300 border border-emerald-500/40",
        failed: "bg-red-500/10 text-red-300 border border-red-500/40",
      };

      diagrams.forEach((diagramId) => {
        const config = DIAGRAM_CONFIG[diagramId];
        const status =
          (aiAnalysis?.[config.statusField] as keyof typeof statusClasses) ||
          "pending";
        const label = config.label;
        const chipClass = statusClasses[status] || statusClasses.pending;
        const item = document.createElement("div");
        item.className =
          "flex items-center justify-between rounded-lg border border-[#1f2937] bg-[#111827] px-3 py-2";
        item.innerHTML = `
          <span class="text-white text-sm font-medium">${label}</span>
          <span class="text-xs font-medium px-2 py-1 rounded-full ${chipClass}">
            ${status.charAt(0).toUpperCase() + status.slice(1)}
          </span>
        `;
        progressItems.appendChild(item);
      });
    };

    const setupProgressListener = (
      userId: string,
      projectId: string,
      diagrams: DiagramId[]
    ) => {
      if (!userId || !projectId || diagrams.length === 0) {
        return null;
      }

      const projectDoc = doc(
        db,
        FIRESTORE_COLLECTIONS.USER_PROJECTS,
        userId,
        FIRESTORE_COLLECTIONS.PROJECTS,
        projectId
      );

      return onSnapshot(projectDoc, (snapshot) => {
        const data = snapshot.data() ?? {};
        const aiAnalysis = (data.aiAnalysis as Record<string, any>) || {};
        renderProgress(diagrams, aiAnalysis);
      });
    };

    document.addEventListener("astro:beforeunload", () => {
      if (unsubscribeProgress) {
        unsubscribeProgress();
        unsubscribeProgress = null;
      }
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Reset error message
      errorMessage.classList.add("hidden");

      // Set loading state
      submitButton.disabled = true;
      buttonText.textContent = "Creating Project...";
      loadingSpinner.classList.remove("hidden");

      try {
        // Get form data
        const formData = new FormData(form);
        const projectName = formData.get("projectName") as string;
        const projectDescription = formData.get("projectDescription") as string;
        const keyObjectives = formData.get("keyObjectives") as string;
        const projectImage = formData.get("projectImage") as string;
        const selectedDiagrams = formData.getAll(
          "selectedDiagrams"
        ) as string[];
        const validDiagramIds = selectedDiagrams.filter(
          (diagram): diagram is DiagramId => isValidDiagramId(diagram)
        );

        const templateId =
          templateIdInput?.value || wizardState.selectedTemplateId;
        const selectedTemplate = templates.find(
          (template) => template.id === templateId
        );

        if (!selectedTemplate) {
          submitButton.disabled = false;
          buttonText.textContent = "Create Project";
          loadingSpinner.classList.add("hidden");
          setStep(1);
          if (templateError) {
            templateError.classList.remove("hidden");
          }
          return;
        }

        const { answers: contextualAnswerMap, isValid } =
          collectContextualAnswers(true);

        if (!isValid) {
          submitButton.disabled = false;
          buttonText.textContent = "Create Project";
          loadingSpinner.classList.add("hidden");
          setStep(2);
          return;
        }

        wizardState.contextualAnswers = contextualAnswerMap;

        const structuredAnswers = selectedTemplate.followUpQuestions.map(
          (question) => {
            const answer = contextualAnswerMap[question.id];
            return {
              id: question.id,
              question: question.question,
              answer: Array.isArray(answer) ? answer : answer ?? "",
            };
          }
        );

        const templatePayload = {
          id: selectedTemplate.id,
          name: selectedTemplate.name,
          description: selectedTemplate.description,
          vertical: selectedTemplate.vertical,
          recommendedTechStack: selectedTemplate.recommendedTechStack,
        };

        const baseWorkerPayload = {
          project: {
            name: projectName,
            description: projectDescription,
            keyObjectives,
          },
          template: templatePayload,
          contextualAnswers: structuredAnswers,
        };

        // Show progress for selected diagrams
        if (validDiagramIds.length > 0) {
          renderProgress(
            validDiagramIds,
            createPendingAIAnalysis(validDiagramIds)
          );
        }

        // First, create the project in Firestore
        const projectResponse = await fetch("/api/projects/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
            image: projectImage,
            selectedDiagrams: validDiagramIds,
          }),
        });

        if (!projectResponse.ok) {
          throw new Error(
            `Failed to create project: ${projectResponse.status}`
          );
        }

        const projectResult = await projectResponse.json();

        if (!projectResult.success) {
          throw new Error(projectResult.error || "Failed to create project");
        }

        const isAnonymous = Boolean(projectResult.isAnonymous);
        const projectId = projectResult.projectId;

        if (!isAnonymous && !projectId) {
          throw new Error("Missing project identifier from server response");
        }

        const resolvedProjectId =
          projectId ||
          (typeof crypto !== "undefined" && "randomUUID" in crypto
            ? crypto.randomUUID()
            : `temp-${Date.now()}`);

        // Store project data in localStorage for the save functionality
        localStorage.setItem(
          "projectData",
          JSON.stringify({
            id: resolvedProjectId,
            name: projectName,
            description: projectDescription,
            keyObjectives: keyObjectives,
            image: projectImage,
            selectedDiagrams: validDiagramIds,
            template: templatePayload,
            contextualAnswers: structuredAnswers,
          })
        );

        if (unsubscribeProgress) {
          unsubscribeProgress();
          unsubscribeProgress = null;
        }

        if (!isAnonymous && projectId && validDiagramIds.length > 0) {
          unsubscribeProgress = setupProgressListener(
            projectResult.userId,
            projectId,
            validDiagramIds
          );
        }

        const aggregatedResults: Record<string, any> = {};

        for (const diagramId of validDiagramIds) {
          try {
            const aiResponse = await fetch(`${workerUrl}/api/ai`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                ...baseWorkerPayload,
                selectedDiagrams: [diagramId],
              }),
            });

            if (!aiResponse.ok) {
              throw new Error(`AI service error: ${aiResponse.status}`);
            }

            const aiResult = await aiResponse.json();
            const diagramResult = aiResult.results?.[diagramId];

            if (diagramResult) {
              aggregatedResults[diagramId] = diagramResult;
            } else {
              aggregatedResults[diagramId] = {
                success: false,
                status: "failed",
                error: "No result returned",
              };
            }

            if (!isAnonymous && projectId) {
              const partialUpdate = extractPartialAIAnalysisFromWorker(
                diagramId,
                aiResult
              );

              const partialResponse = await fetch(
                `/api/projects/${projectId}/ai-analysis/partial`,
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    partialAIAnalysis: partialUpdate,
                  }),
                }
              );

              if (!partialResponse.ok) {
                console.warn("Failed to persist partial AI analysis update");
              }
            }
          } catch (error) {
            console.error(`Error generating ${diagramId}:`, error);

            aggregatedResults[diagramId] = {
              success: false,
              error: error instanceof Error ? error.message : "Unknown error",
              status: "failed",
            };

            if (!isAnonymous && projectId) {
              const failureStatus = {
                [DIAGRAM_CONFIG[diagramId].statusField]: "failed",
              };

              const failureResponse = await fetch(
                `/api/projects/${projectId}/ai-analysis/partial`,
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    partialAIAnalysis: failureStatus,
                  }),
                }
              );

              if (!failureResponse.ok) {
                console.warn(
                  "Failed to persist failure status for diagram",
                  diagramId
                );
              }
            }
          }
        }

        const aiResult = {
          success: true,
          results: aggregatedResults,
        };

        localStorage.setItem("aiResponse", JSON.stringify(aiResult));

        // Check if user is anonymous from the API response
        if (isAnonymous) {
          // Redirect to the AI response page for anonymous users
          window.location.href = "/new-project/ai-response";
        } else {
          // Redirect to the specific project page for authenticated users
          window.location.href = `/projects/${projectId}`;
        }
      } catch (error) {
        console.error("Error creating project:", error);

        // Show error message
        const errorText = errorMessage.querySelector("p");
        if (errorText) {
          errorText.textContent =
            error instanceof Error
              ? error.message
              : "An unexpected error occurred";
        }
        errorMessage.classList.remove("hidden");

        // Reset button state
        submitButton.disabled = false;
        buttonText.textContent = "Create Project";
        loadingSpinner.classList.add("hidden");
        progressContainer.classList.add("hidden");
      }
    });
  });
</script>
