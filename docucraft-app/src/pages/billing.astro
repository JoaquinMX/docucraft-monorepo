---
import MainLayout from "@layouts/MainLayout.astro";
import { BILLING_PLANS } from "@/constants/billing";
import { app } from "@/firebase/server";
import { getAuth } from "firebase-admin/auth";
import { FirestoreServerService } from "@/services/firestore-server";
import type { UserBillingProfile } from "@/types/Billing";

const auth = getAuth(app);
const planOptions = Object.values(BILLING_PLANS);
let billingProfile: UserBillingProfile | null = null;
let user: {
  displayName?: string | null;
  email?: string | null;
  isAnonymous?: boolean;
  uid?: string;
} | null = null;

if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/signin");
}

try {
  const sessionCookie = Astro.cookies.get("__session")?.value ?? "";
  const decodedCookie = await auth.verifySessionCookie(sessionCookie);
  const userRecord = await auth.getUser(decodedCookie.uid);

  user = {
    displayName: userRecord.displayName,
    email: userRecord.email,
    isAnonymous: userRecord.providerData.length === 0,
    uid: userRecord.uid,
  };

  if (!user.isAnonymous) {
    billingProfile = await FirestoreServerService.getOrCreateUserBillingProfile(
      userRecord.uid
    );
  }
} catch (error) {
  console.error("Failed to resolve user for billing page", error);
  return Astro.redirect("/signin");
}

const publishableKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY ?? "";
---

<MainLayout user={user}>
  <div class="flex flex-1 justify-center py-8">
    <div class="layout-content-container flex flex-col gap-8 w-full max-w-3xl px-6">
      <header class="flex flex-col gap-2 text-center">
        <h1 class="text-white text-3xl font-semibold">Billing &amp; Plans</h1>
        <p class="text-[#cbd5f5] text-base">
          Choose the plan that fits your workflow and unlock more DocuCraft AI generations.
        </p>
        {
          billingProfile ? (
            <p class="text-sm text-[#9ca3af]">
              Current plan: <span class="font-medium text-white">{billingProfile.planId}</span>
              {billingProfile.subscriptionActive
                ? " • Subscription active"
                : ` • ${billingProfile.creditsRemaining} credits remaining`}
            </p>
          ) : null
        }
      </header>

      <section class="grid gap-4 md:grid-cols-3">
        {planOptions.map((plan) => (
          <div
            class={`flex flex-col gap-4 rounded-2xl border px-5 py-6 transition-colors ${
              plan.highlight
                ? "border-[#3ba7d1] bg-[#122234]"
                : "border-[#223649] bg-[#0c1520]"
            }`}
            data-plan-id={plan.id}
          >
            <div class="flex items-center justify-between">
              <h2 class="text-white text-xl font-semibold">{plan.name}</h2>
              {plan.highlight ? (
                <span class="text-xs font-medium uppercase text-[#3ba7d1]">
                  Popular
                </span>
              ) : null}
            </div>
            <p class="text-sm text-[#94a3b8]">{plan.description}</p>
            <div class="flex items-baseline gap-1 text-white">
              <span class="text-3xl font-bold">${plan.price}</span>
              <span class="text-sm uppercase tracking-wide">{plan.currency}</span>
            </div>
            <p class="text-xs text-[#7f8ea6]">
              {plan.isSubscription
                ? "Unlimited AI generations while subscribed"
                : `Includes ${plan.credits} AI generations`}
            </p>
            <button
              type="button"
              class="select-plan-button flex h-10 w-full items-center justify-center rounded-lg border border-transparent bg-[#1f2937] text-sm font-medium text-white transition hover:bg-[#3ba7d1]"
              data-plan-id={plan.id}
            >
              Choose {plan.name}
            </button>
          </div>
        ))}
      </section>

      <section class="rounded-2xl border border-[#223649] bg-[#0c1520] p-6">
        <h3 class="text-white text-lg font-semibold mb-2">Checkout</h3>
        <p class="text-sm text-[#9ca3af] mb-4">
          Enter your payment details and confirm your plan. Your credits will be available immediately after a successful payment.
        </p>
        <form id="billingForm" class="flex flex-col gap-4">
          <div class="flex flex-col gap-2">
            <label class="text-sm text-white font-medium">Card details</label>
            <div
              id="card-element"
              class="rounded-lg border border-[#223649] bg-[#0f1b2a] p-3 text-white"
            ></div>
          </div>
          <button
            type="submit"
            class="flex h-11 items-center justify-center rounded-lg bg-[#3ba7d1] text-sm font-semibold text-white transition hover:bg-[#2e85a8] disabled:opacity-50"
            id="completePurchase"
          >
            Complete Purchase
          </button>
          <p id="paymentMessage" class="text-sm text-[#fca5a5] hidden"></p>
        </form>
      </section>
    </div>
  </div>

  <script type="application/json" id="billing-data">
    {JSON.stringify({
      plans: planOptions,
      publishableKey,
      profile: billingProfile,
      isAnonymous: user?.isAnonymous ?? false,
    })}
  </script>

  <script type="module">
    import { loadStripe } from "@stripe/stripe-js";

    const dataElement = document.getElementById("billing-data");
    const parsedData = dataElement?.textContent
      ? JSON.parse(dataElement.textContent)
      : {};

    const {
      plans = [],
      publishableKey: stripePublishableKey = "",
      profile = null,
      isAnonymous = false,
    } = parsedData;

    document.addEventListener("astro:page-load", async () => {
      const messageEl = document.getElementById("paymentMessage");
      const purchaseButton = document.getElementById(
        "completePurchase"
      ) as HTMLButtonElement | null;
      const cardContainer = document.getElementById("card-element");
      const form = document.getElementById("billingForm") as HTMLFormElement | null;

      if (!purchaseButton || !cardContainer || !form || !messageEl) {
        console.error("Billing elements not found");
        return;
      }

      let selectedPlanId = plans[0]?.id ?? null;

      const planButtons = Array.from(
        document.querySelectorAll<HTMLButtonElement>(".select-plan-button")
      );

      planButtons.forEach((button) => {
        button.addEventListener("click", () => {
          selectedPlanId = button.dataset.planId ?? null;
          planButtons.forEach((btn) => btn.classList.remove("bg-[#3ba7d1]"));
          button.classList.add("bg-[#3ba7d1]");
          messageEl.classList.add("hidden");
        });
      });

      if (selectedPlanId) {
        const defaultButton = planButtons.find(
          (btn) => btn.dataset.planId === selectedPlanId
        );
        defaultButton?.classList.add("bg-[#3ba7d1]");
      }

      if (!stripePublishableKey) {
        messageEl.textContent =
          "Stripe is not configured. Contact support to enable billing.";
        messageEl.classList.remove("hidden");
        purchaseButton.disabled = true;
        return;
      }

      if (isAnonymous) {
        messageEl.textContent =
          "Sign in with a full account to purchase credits.";
        messageEl.classList.remove("hidden");
        purchaseButton.disabled = true;
        return;
      }

      const stripe = await loadStripe(stripePublishableKey);

      if (!stripe) {
        messageEl.textContent = "Unable to load Stripe. Please refresh and try again.";
        messageEl.classList.remove("hidden");
        purchaseButton.disabled = true;
        return;
      }

      const elements = stripe.elements();
      const cardElement = elements.create("card", {
        style: {
          base: {
            color: "#f3f4f6",
            fontFamily: '"Inter", system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif',
            fontSize: "16px",
            iconColor: "#3ba7d1",
            '::placeholder': { color: "#94a3b8" },
          },
          invalid: {
            color: "#fca5a5",
          },
        },
      });
      cardElement.mount(cardContainer);

      const setMessage = (message: string, isError = true) => {
        messageEl.textContent = message;
        messageEl.classList.toggle("text-[#fca5a5]", isError);
        messageEl.classList.toggle("text-[#34d399]", !isError);
        messageEl.classList.remove("hidden");
      };

      form.addEventListener("submit", async (event) => {
        event.preventDefault();
        messageEl.classList.add("hidden");

        if (!selectedPlanId) {
          setMessage("Select a plan to continue.");
          return;
        }

        const plan = plans.find((item: any) => item.id === selectedPlanId);

        if (!plan) {
          setMessage("The selected plan could not be found.");
          return;
        }

        purchaseButton.disabled = true;
        purchaseButton.textContent = "Processing...";

        try {
          const intentResponse = await fetch("/api/payments/create-intent", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              amount: plan.price,
              currency: plan.currency,
            }),
          });

          const intentPayload = await intentResponse.json();

          if (!intentResponse.ok || !intentPayload.success) {
            throw new Error(intentPayload.error ?? "Unable to create payment intent");
          }

          const { clientSecret } = intentPayload as { clientSecret?: string };

          if (!clientSecret) {
            throw new Error("Payment intent did not include a client secret");
          }

          const { error, paymentIntent } = await stripe.confirmCardPayment(
            clientSecret,
            {
              payment_method: {
                card: cardElement,
              },
            }
          );

          if (error) {
            throw new Error(error.message ?? "Payment failed");
          }

          if (!paymentIntent || paymentIntent.status !== "succeeded") {
            throw new Error("Payment was not completed successfully");
          }

          const grantResponse = await fetch("/api/billing/grant", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              planId: plan.id,
              paymentIntentId: paymentIntent.id,
            }),
          });

          const grantPayload = await grantResponse.json();

          if (!grantResponse.ok || !grantPayload.success) {
            throw new Error(grantPayload.error ?? "Unable to apply plan");
          }

          setMessage("Payment successful! Your credits are ready to use.", false);
          purchaseButton.textContent = "Complete Purchase";
          purchaseButton.disabled = false;
        } catch (error) {
          setMessage(
            error instanceof Error ? error.message : "Payment could not be completed"
          );
          purchaseButton.textContent = "Complete Purchase";
          purchaseButton.disabled = false;
        }
      });
    });
  </script>
</MainLayout>
