---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import { getFirestore } from "firebase-admin/firestore";
import { FIRESTORE_COLLECTIONS } from "@/constants/firestore";
import MainLayout from "@layouts/MainLayout.astro";
import ProjectCard from "@/components/ProjectCard.astro";
import ButtonNavigation from "@/components/ButtonNavigation.astro";
import LoadingSpinner from "@/components/LoadingSpinner.astro";
import ErrorMessage from "@/components/ErrorMessage.astro";
import EmptyState from "@/components/EmptyState.astro";
import type { Project } from "@/types/Project";

const auth = getAuth(app);
const db = getFirestore(app);

/* Verificar la sesiÃ³n actual */
if (!Astro.cookies.has("__session")) {
  return Astro.redirect("/signin");
}

const sessionCookie = Astro.cookies.get("__session")?.value;
let user: {
  displayName?: string | null;
  email?: string | null;
  isAnonymous?: boolean;
  uid?: string;
} | null = null;

try {
  const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");
  const userRecord = await auth.getUser(decodedCookie.uid);
  user = {
    displayName: userRecord.displayName,
    email: userRecord.email,
    isAnonymous: userRecord.providerData.length === 0,
    uid: userRecord.uid,
  };
} catch (error) {
  Astro.cookies.delete("__session", { path: "/" });
  return Astro.redirect("/signin");
}

if (!user) {
  return Astro.redirect("/signin");
}

// Fetch projects from Firestore using the new user-based structure
let projects: Project[] = [];
let error: string | null = null;

try {
  if (user.uid) {
    const projectsRef = db
      .collection(FIRESTORE_COLLECTIONS.USER_PROJECTS)
      .doc(user.uid)
      .collection(FIRESTORE_COLLECTIONS.PROJECTS);
    const snapshot = await projectsRef.orderBy("createdAt", "desc").get();

    projects = snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    })) as Project[];
  }
} catch (err) {
  console.error("Error fetching projects:", err);
  error = "Failed to load projects";
}
---

<MainLayout user={user}>
  <div class="layout-container flex h-full grow flex-col">
    <div class="px-4 sm:px-10 md:px-20 lg:px-40 flex flex-1 justify-center py-5">
      <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
        <div class="flex flex-wrap justify-between gap-3 p-4">
          <p
            class="text-white tracking-light text-2xl sm:text-3xl md:text-4xl font-bold leading-tight min-w-72"
          >
            My Projects
          </p>
          <ButtonNavigation text="Create New Project" href="/new-project" />
        </div>

        {projects.length > 0 && (
          <div class="px-4 pb-2">
            <label
              for="projectSearch"
              class="block text-[#94a3b3] text-xs font-medium uppercase tracking-[0.08em] mb-2"
            >
              Search Projects
            </label>
            <div class="relative">
              <input
                id="projectSearch"
                type="text"
                class="flex h-11 w-full rounded-lg border border-[#223649] bg-[#0c1520] px-4 pr-11 text-white placeholder:text-[#94a3b3] focus:border-[#3ba7d1] focus:outline-none text-sm"
                placeholder="Filter by project name or description"
                autocomplete="off"
              />
              <svg
                class="pointer-events-none absolute right-3 top-1/2 h-5 w-5 -translate-y-1/2 text-[#94a3b3]"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <circle cx="11" cy="11" r="7" />
                <line x1="20" y1="20" x2="16.65" y2="16.65" />
              </svg>
            </div>
          </div>
        )}

        {
          user?.isAnonymous && (
            <div class="mx-4 mb-4 p-3 bg-[#374151] rounded-lg border border-[#4b5563]">
              <p class="text-[#d1d5db] text-sm">
                <strong>Guest Mode:</strong> You're viewing projects as a guest.
                <a href="/signin" class="text-[#3ba7d1] hover:underline">
                  Sign in
                </a>{" "}
                to save your projects permanently.
              </p>
            </div>
          )
        }

        {error && <ErrorMessage message={error} showRetry={true} />}

        <div
          class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3 p-4"
        >
          {
            projects.length === 0 && !error ? (
              <div class="col-span-full">
                <EmptyState
                  title="No projects yet"
                  description="Create your first project to get started"
                  actionText="Create New Project"
                  actionHref="/new-project"
                  icon="ðŸš€"
                />
              </div>
            ) : (
              <>
                {projects.map((project) => (
                  <ProjectCard
                    project={project}
                    key={project.id}
                    href={`/projects/${project.id}`}
                  />
                ))}
                <div
                  id="noResultsMessage"
                  class="hidden col-span-full rounded-lg border border-[#223649] bg-[#0c1520] px-4 py-6 text-center text-[#94a3b3] text-sm"
                >
                  No projects match your search.
                </div>
              </>
            )
          }
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const searchInput = document.getElementById(
      "projectSearch"
    ) as HTMLInputElement | null;

    if (!searchInput) {
      return;
    }

    const projectCards = Array.from(
      document.querySelectorAll<HTMLElement>("[data-project-card]")
    );
    const noResultsMessage = document.getElementById(
      "noResultsMessage"
    ) as HTMLDivElement | null;

    const updateVisibility = () => {
      const query = searchInput.value.trim().toLowerCase();
      let visibleCount = 0;

      projectCards.forEach((card) => {
        const name = card.dataset.projectName?.toLowerCase() ?? "";
        const description = card.dataset.projectDescription?.toLowerCase() ?? "";
        const matches =
          query.length === 0 ||
          name.includes(query) ||
          description.includes(query);

        if (matches) {
          card.classList.remove("hidden");
          visibleCount += 1;
        } else {
          card.classList.add("hidden");
        }
      });

      if (noResultsMessage) {
        const shouldShowNoResults = query.length > 0 && visibleCount === 0;
        noResultsMessage.classList.toggle("hidden", !shouldShowNoResults);
      }
    };

    searchInput.addEventListener("input", updateVisibility);
    updateVisibility();
  });
</script>
